{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LET Portal Documentation - Angular .NET Core Back Office Open source Web Portal Platform 2020","text":"<p>Big release 0.9.0</p> <p>We are revamping the documentation to adapt Roadmap 1.0.0. So that you see the outdated documentation which is marked v0.8.0 instead of v0.9.0</p>"},{"location":"#introduction-to-let-portal","title":"Introduction to LET Portal","text":"<p>LET Portal is a web platform which helps a company to centralize all internal activities of departments in one system. LET Portal provides many features that push a change quickly to adapt expectation such as Back Office, Internal System or anything that relates to intranet.</p> <p>Our vision is we are providing a tool, platform for small company, startup company or IT department, who carries many business aspects, delivers an internal feature to another. The developer, who is struggling with our Backend solution, can quickly resolve their work when any change request is coming.</p> <p>Info</p> <p>LET Portal is still developing a few features which only adapt a startup and small company. We hope to get more contribution and involve to adapt many business cases.</p>"},{"location":"#why-choose-let-portal","title":"Why choose LET Portal?","text":""},{"location":"#problem","title":"Problem","text":"<p>Let's take a look a small picture about Software Delivery in a company when any software is upcoming.</p> <p></p> <p>Many startup and small companies are mainly focusing on our software product which helps to engage clients contributes their revenue. Therefore, most of the time is using to develop and test the application to ensure a quality of product, so they cut down preparation time by many ways (e.g training documentation, reporting). </p> <p>However, based on our experience, it is always increasing cost in maintainance time, raising a burden of complexity to Back Office team when they are supporting clients. Day by day, these chains can cause the product to be poor in client eyes. </p>"},{"location":"#solution","title":"Solution","text":"<p>LET Portal helps developer/IT team can provide quickly the application form, monitor dashboard, reporting chart. Beside, LET Portal allows to be configured by Role-based authorization  to  grant access permission to user. It makes them to act correctly, regarding to their assigned role.</p> <p>There are core features which LET Portal provides.</p> <p></p>"},{"location":"#changes-log","title":"Changes Log","text":"<p>Current version:  v0.9.0-rc1</p>"},{"location":"#features-list","title":"Features List","text":"<ul> <li> Users<ul> <li>Login</li> <li>Forgot Password</li> <li>Users Management</li> <li>Roles Management</li> </ul> </li> <li> Apps<ul> <li>Apps Management</li> <li>Menu</li> </ul> </li> <li> Pages<ul> <li>Pages Management</li> <li>Page Builder</li> <li>Page Render</li> <li>Standard Forms<ul> <li>Standards Management</li> <li>Standard Builder<ul> <li>Standard Form</li> <li>Array</li> <li>Tree</li> </ul> </li> </ul> </li> <li>Dynamic List<ul> <li>Dynamic List Management</li> <li>Dynamic List Builder</li> <li>Export Excel</li> </ul> </li> <li>Charts<ul> <li>Charts Management</li> <li>Chart Builder</li> </ul> </li> </ul> </li> <li> Backup<ul> <li>Create Backup package</li> <li>Restore Backup package</li> <li>Generate code for CLI</li> <li>Preview&amp;Compare Backup</li> </ul> </li> <li> Localization<ul> <li>Create Localization package</li> </ul> </li> <li> CLI Tool<ul> <li>Install, Uninstall, Upgrade, Downgrade Commands</li> <li>App: Portal, Identity, CMS</li> <li>Patch version</li> </ul> </li> </ul>"},{"location":"#experimental-features","title":"Experimental features","text":"<p>These features are TODO list that we are releasing soon.</p> <ul> <li> Lightweight CMS<ul> <li>Site, Theme, Page</li> <li>Cache, google metadata</li> <li>Resolving parameter</li> </ul> </li> </ul> <p>About author</p> <p>Hi, I am An Quang Phuc Le, live in Viet Nam, my English name is Johnathan Le (if you hard to pronounce Vietnamese language). I have worked on Microsoft technologies from 2011 such as .NET WebForm, .NET MVC, .NET Core, SQL Server, Azure, etc.</p>"},{"location":"backup-recovery/backup/","title":"Backup & Recovery - Backup","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"backup-recovery/backup/#simple-backup","title":"Simple Backup","text":"<p>LET Portal provides a simple backup strategy for helping you to ship a change from Staging to Production.</p> <p>Basically, you just create a backup package and then upload it on Production server.</p> <p>Backup as Revision</p> <p>We are still designing a good backup strategy for addressing Backup as Revision. For example: You install version 0.5.0 LET Portal, then you restore one Backup, this will adjust this LET Portal version to 0.5.0-rev1.0. It helps you to address more changes easily on Production. But it is still on paper now.</p>"},{"location":"backup-recovery/backup/#backup-builder","title":"Backup Builder","text":"<p>You can create a backup package on Backup Builder page. Clicks on Menu -&gt; Core -&gt; Backup Management -&gt; Clicks on \"Create\" button</p> <p></p> <p>Now you just search your components that need to be backup on Selection. </p> <p>Then you click on Create button for creating a Backup package. You will see a downloading text below:</p> <p></p> <p>Now you just click on link text for downloading backup package (e.g 637189848046912860.zip). Save it on your PC to restore on another server.</p>"},{"location":"backup-recovery/recovery/","title":"Backup & Recovery - Recovery","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"backup-recovery/recovery/#upload-package","title":"Upload Package","text":"<p>You need to visit Backup Management page via Menu -&gt; Core -&gt; Backup Management</p> <p>Then you click on Restore button to redirect Upload page</p> <p>On this page, you need to upload a backup package file to server.</p> <p></p> <p>After you upload successfully, you will be in Backup Preview page</p>"},{"location":"backup-recovery/recovery/#preview-a-backup","title":"Preview a Backup","text":"<p>This preview page is very usefull for doublecheck a backup. Carefulness is never redundant, especially Production. Before you restore a backup, we highly recommend to check recovery items one by one.</p> <p></p> <p>Comparison</p> <p>We also provide a comparison table as source code comparison for helping you preview.</p> <p></p> <p>If you ensure everything is fine, then click on \"Restore\" button to proceed a change.</p>"},{"location":"chat-videocall/chat/","title":"Chat & Video call - Chat feature","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"chat-videocall/chat/#features-list","title":"Features list","text":"<p>We are trying to provide common features of chat below:</p> <ul> <li> Send text message</li> <li> Translate shortcut emotion in message to unicode emotion (ex: <code>:)</code> -&gt; \ud83d\ude00 )</li> <li> Emotion picker (support only unicode)</li> <li> File attachment (limit size up to 16Mb) </li> <li> Display image in message box</li> </ul> <p>There remaining features are scheduling:</p> <ul> <li> Detech link and display meta</li> <li> Support display attachment video </li> <li> Video call logs</li> <li> <code>Group</code> chat room</li> </ul> <p></p>"},{"location":"chat-videocall/chat/#design-aspects","title":"Design aspects","text":"<p>Before we are going down to this page, we need to know clearly some design aspects below:</p> <ul> <li><code>Chat Room</code>: two or more users can be joined into one chat room. Chat room can have two type <code>Double</code> or <code>Group</code>. Note: <code>Group</code> isn't available yet</li> <li><code>Chat Session</code>: each room can have multiple sesions which contain group of messages, default maximum number of messages per session is 50</li> <li><code>Attachment File</code>: each attachment file will be uploaded into LET Portal via File service.</li> <li>By default, LET Portal will create new one chat session when the current session reachs maximum messages</li> <li>All alive chat rooms will be stored in one <code>singleton ChatContext</code> before persisting to Database. Technically, scale-out can't be applicable and cache in-memory is used.</li> </ul>"},{"location":"chat-videocall/chat/#chat-capacity","title":"Chat Capacity","text":"<p>Due to simple Portal's requirement, Chat function is provided to support users communicate via LET Portal with less features than any Chat software in a market. Thus, the capacity is stricted to one VM and <code>scale up</code> is applicable. We also hard code settings below:</p> Option File Description Default <code>MaximumSessionsPerChatRoom</code> src\\web-apis\\LetPortal.ServiceManagementApis\\Files\\Chat\\v1.0\\appsettings.json Maximum number of sessions can be cached in <code>ChatContext</code> 5 (disappear in appsettings.json) <code>ThresholdNumberOfMessages</code> src\\web-apis\\LetPortal.ServiceManagementApis\\Files\\Chat\\v1.0\\appsettings.json Maximum number of messages in one chat session 50 (disappear in appsettings.json) Allow attachment file types src\\web-portal\\src\\environment\\environment.ts List of file types are allowed to upload <code>jpg;jpeg;gif;png;zip;rar;doc;docx;xls;xlsx;pdf</code> Maximum attachment file size src\\web-portal\\src\\environment\\environment.ts Maximum upload size 16Mb"},{"location":"chat-videocall/videocall/","title":"Chat & Video call - Video call feature","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"chat-videocall/videocall/#features-list","title":"Features list","text":"<p>At the moment, LET Portal only provides one-one video call. We don't have a plan for group call or meeting room. We are very appriciate if anyone can help us to build a draft version based on our source code.</p>"},{"location":"chat-videocall/videocall/#technical-detail","title":"Technical Detail","text":"<p>Different with chat function based on SignalR web socket, video call is more complicated and it isn't easy to understand and deploy. So that we take this section for explaining How to develop it.</p>"},{"location":"chat-videocall/videocall/#webrtc","title":"WebRTC","text":"<p>WebRTC is a real-time communication for the web, it is an open-source and supported by many big technology companies. By default, it is built-in on most of browsers such as Firefox, Chrome, Safari. Therefore, LET Portal builds video call function based on WebRTC and combine with SignalR for authentication.</p>"},{"location":"chat-videocall/videocall/#let-portal-flow","title":"LET Portal flow","text":"<p>Let's take a look on the negotication flow</p> <p></p> <p>Rest of the flow is exchanging info via SignalR in the middle. SignalR, in this flow, takes a role as Authentication Provider and Connection Router for device-call-device.</p> <ul> <li>Validate JWT Token</li> <li>Send <code>connectionId</code> of caller and callee to another</li> <li>Provide <code>STUN server</code> info which has been stored in the server-side</li> <li>Maintain call state and prevent another incoming call from others</li> <li>Notify another when anyone drops a call</li> </ul>"},{"location":"chat-videocall/videocall/#webrtc-p2p-flow","title":"WebRTC P2P flow","text":"<p>After both users received <code>STUN server</code>, they can create P2P connection and negotiate. We prefer to read this article for great explanation about WebRTC flow</p>"},{"location":"chat-videocall/videocall/#stun-vs-tun-server","title":"STUN vs TUN server","text":"<p>The key different between <code>STUN</code> and <code>TURN</code> server is <code>STUN</code> allows the media will travel directly between two devices (P2P) and <code>TURN</code> acts as proxy to transfer media between two devices.</p> <p>But what exact situation to use <code>TURN</code> rather than  <code>STUN</code>, which seems to be better? The answer is it depends on your Network and Deployment model. </p> <p>For example, if you have a plan to deploy whole LET Portal in private network, you don't want to be public this system. So that you want to create or hire one <code>TURN</code> server because <code>STUN</code> can't detect your devices because of Firewall.</p> <p>If you want to create your own <code>TURN server</code>, you can try this NodeJs server. Unfounately, .NET Core isn't providing any open-source <code>TURN server</code>.</p>"},{"location":"chat-videocall/videocall/#deployment-note","title":"Deployment Note","text":"<p>If you know clearly about WebRT, <code>STUN</code> and <code>TURN</code>, so you can choose your deployment model when you want to bring Video Call works. We just take some important notes below:</p> <ul> <li> Is LET Portal deployed in Private Network, and all devices use private network as well? Yes, choose <code>TURN</code> otherwise <code>STUN</code></li> <li> IS LET Portal deployed in the internet and all devices use private network, Firewall prevents <code>NAT</code> client? Yes, choose <code>TURN</code> otherwise <code>STUN</code></li> <li> Where can I change <code>STUN</code> or <code>TURN</code> server? You can change it on Chat's appsettings.json, section <code>VideoCallOptions</code></li> <li> Where can find <code>STUN</code> servers in the internet? You can read this list</li> </ul> <p>Public and Private</p> <p>In term of network, public is a network which can be reached over the internet. Otherwise, private is a LAN network which can't be reached over the internet. In fact, you should choose <code>TURN</code> server if your devices can't be detected by <code>NAT</code> because Firewall prevents <code>NAT</code> clients.</p>"},{"location":"cli/installation/","title":"LET Portal CLI - Installation","text":"<p>The documentation applies to: v0.8.0</p> <p>LET Portal CLI is cross-platform toolchain for installing, uninstalling, upgrading, downgrading and patching a Portal Database and Identity Database.</p> <p>DevOps culture, Coninous Integration and Coninous Delivery are very popular, so LET Portal need to adapt with these changes for making easier life.</p> <p>However, we are still developing this CLI to make it 'like' any popular CLI such as Dotnet CLI so it might take long time to complete. At this time, it is just a compiled source code and set it into Windows and Linux Environment.</p>"},{"location":"cli/installation/#installation-update","title":"Installation &amp; Update","text":"<p>A simple step is you run a script file to install or update LET Portal CLI.</p> <p>``` powershell tab=\"Windows\" .\\src\\web-apis\\installation.ps1 <pre><code>``` bash tab=\"Linux\"\n./src/web-apis/installation.sh\n</code></pre></p> <p>Update new version</p> <p>We always update a CLI so that you need to update frequently by running this script.</p> <p>Default installation folder</p> <p>``` powershell tab=\"Windows\" C:\\Tools <pre><code>``` bash tab=\"Linux\"\n~/.letportal\n</code></pre></p>"},{"location":"cli/installation/#synopsis","title":"Synopsis","text":"<p><code>bash tab=\"Synopsis\" letportal &lt;APP&gt; &lt;Command&gt; &lt;Version&gt; [-c|--connection] [-db|--db-type] [-f|--file] [-p|--patch]</code></p>"},{"location":"cli/installation/#cli-commands","title":"CLI Commands","text":"<p>The following commands are installed by default:</p> <ul> <li>info</li> <li>install</li> <li>uninstall</li> <li>upgrade</li> <li>downgrade</li> <li>patch</li> </ul>"},{"location":"cli/letportal-downgrade/","title":"LET Portal CLI - downgrade","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"cli/letportal-downgrade/#name","title":"Name","text":"<p><code>letportal downgrade</code> - downgrade to a previous version of LET Portal</p>"},{"location":"cli/letportal-downgrade/#synopsis","title":"Synopsis","text":"<pre><code>letportal &lt;APP&gt; downgrade &lt;Version&gt; [-c|--connection] [-db|--db-type] [-f|--file]\n</code></pre>"},{"location":"cli/letportal-downgrade/#arguments","title":"Arguments","text":"<ul> <li><code>APP</code>: Current we only support two apps are <code>portal</code> or <code>identity</code></li> <li><code>Version</code>: Specific version which will be downgraded. Ex: 0.5.0</li> <li>[<code>-c|--connection</code>]: A connection string to database, if null, default value will be <ul> <li>With <code>portal</code>: mongodb://localhost:27017/letportal</li> <li>With <code>identity</code>: mongodb://localhost:27017/letportalidentity</li> </ul> </li> <li>[<code>-db|--db-type</code>]: Database type of a connection string. Default is <code>MongoDB</code>, can change to <code>SQLServer</code>, <code>PostgreSQL</code>, <code>MySQL</code></li> <li>[<code>-f|--file</code>]: Path to <code>tools.json</code> file</li> </ul>"},{"location":"cli/letportal-downgrade/#toolsjson","title":"tools.json","text":"<p>Location: src\\LetPortal.Tools\\tools.json</p> <p>Published Tools: Same folder of installation folder of CLI. </p> <p>This file is used to create three default database connections on Portal Database. There are <code>Identity Database</code>, <code>Portal Database</code> and <code>Service Management Database</code>.</p> <p>We separate to four options which are based on database type <code>MongoStoringConnections</code>, <code>PostgreSqlStoringConnections</code>, <code>SqlServerStoringConnections</code>, <code>MySqlStoringConnections</code>. Based on an argument [<code>-db</code>], CLI will take a relating option to insert. Thus you need to check carefully this file before running <code>install</code> command</p>"},{"location":"cli/letportal-downgrade/#example","title":"Example","text":"<p>With default option, connection string = <code>mongodb://localhost:27017/letportal</code> and database type = <code>MongoDB</code>, tools.json path = <code>Same as installation tools folder</code>. Downgrade version: 0.5.0</p> <pre><code>letportal portal downgrade 0.5.0\n</code></pre> <p>With database type and connection string, tools.json path = <code>Same as installation tools folder</code>. Downgrade version: 0.5.0</p> <pre><code>letportal portal downgrade 0.5.0 -c mongodb://localhost:27017/letportal -db MongoDB\n</code></pre>"},{"location":"cli/letportal-info/","title":"LET Portal CLI - info","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"cli/letportal-info/#name","title":"Name","text":"<p><code>letportal info</code> - provide a current installed version of App</p>"},{"location":"cli/letportal-info/#synopsis","title":"Synopsis","text":"<pre><code>letportal &lt;APP&gt; info [-c|--connection] [-db|--db-type]\n</code></pre>"},{"location":"cli/letportal-info/#arguments","title":"Arguments","text":"<ul> <li><code>APP</code>: Current we only support two apps are <code>portal</code> or <code>identity</code></li> <li>[<code>-c|--connection</code>]: A connection string to database, if null, default value will be <ul> <li>With <code>portal</code>: mongodb://localhost:27017/letportal</li> <li>With <code>identity</code>: mongodb://localhost:27017/letportalidentity</li> </ul> </li> <li>[<code>-db|--db-type</code>]: Database type of a connection string. Default is <code>MongoDB</code>, can change to <code>SQLServer</code>, <code>PostgreSQL</code>, <code>MySQL</code></li> </ul>"},{"location":"cli/letportal-info/#example","title":"Example","text":"<p>With default option</p> <pre><code>letportal portal info\n</code></pre> <p>With database type and connection string</p> <pre><code>letportal portal info -c mongodb://localhost:27017/letportal -db MongoDB\n</code></pre>"},{"location":"cli/letportal-install/","title":"LET Portal CLI - install","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"cli/letportal-install/#name","title":"Name","text":"<p><code>letportal install</code> - install a latest LET Portal data to specific database</p>"},{"location":"cli/letportal-install/#synopsis","title":"Synopsis","text":"<pre><code>letportal &lt;APP&gt; install [-c|--connection] [-db|--db-type] [-f|--file]\n</code></pre>"},{"location":"cli/letportal-install/#arguments","title":"Arguments","text":"<ul> <li><code>APP</code>: Current we only support two apps are <code>portal</code> or <code>identity</code></li> <li>[<code>-c|--connection</code>]: A connection string to database, if null, default value will be <ul> <li>With <code>portal</code>: mongodb://localhost:27017/letportal</li> <li>With <code>identity</code>: mongodb://localhost:27017/letportalidentity</li> </ul> </li> <li>[<code>-db|--db-type</code>]: Database type of a connection string. Default is <code>MongoDB</code>, can change to <code>SQLServer</code>, <code>PostgreSQL</code>, <code>MySQL</code></li> <li>[<code>-f|--file</code>]: Path to <code>tools.json</code> file</li> </ul>"},{"location":"cli/letportal-install/#toolsjson","title":"tools.json","text":"<p>Location: src\\LetPortal.Tools\\tools.json</p> <p>Published Tools: Same folder of installation folder of CLI. </p> <p>This file is used to create three default database connections on Portal Database. There are <code>Identity Database</code>, <code>Portal Database</code> and <code>Service Management Database</code>.</p> <p>We separate to four options which are based on database type <code>MongoStoringConnections</code>, <code>PostgreSqlStoringConnections</code>, <code>SqlServerStoringConnections</code>, <code>MySqlStoringConnections</code>. Based on an argument [<code>-db</code>], CLI will take a relating option to insert. Thus you need to check carefully this file before running <code>install</code> command</p>"},{"location":"cli/letportal-install/#example","title":"Example","text":"<p>With default option, connection string = <code>mongodb://localhost:27017/letportal</code> and database type = <code>MongoDB</code>, tools.json path = <code>Same as installation tools folder</code></p> <pre><code>letportal portal install\n</code></pre> <p>With database type and connection string, tools.json path = <code>Same as installation tools folder</code></p> <pre><code>letportal portal install -c mongodb://localhost:27017/letportal -db MongoDB\n</code></pre>"},{"location":"cli/letportal-patch/","title":"LET Portal CLI - patch","text":"<p>The documentation applies to: v0.8.0</p> <p>Sorry we are still developing this feature.</p>"},{"location":"cli/letportal-uninstall/","title":"LET Portal CLI - uninstall","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"cli/letportal-uninstall/#name","title":"Name","text":"<p><code>letportal uninstall</code> - clear all LET Portal data </p>"},{"location":"cli/letportal-uninstall/#synopsis","title":"Synopsis","text":"<pre><code>letportal &lt;APP&gt; uninstall [-c|--connection] [-db|--db-type]\n</code></pre>"},{"location":"cli/letportal-uninstall/#arguments","title":"Arguments","text":"<ul> <li><code>APP</code>: Current we only support two apps are <code>portal</code> or <code>identity</code></li> <li>[<code>-c|--connection</code>]: A connection string to database, if null, default value will be <ul> <li>With <code>portal</code>: mongodb://localhost:27017/letportal</li> <li>With <code>identity</code>: mongodb://localhost:27017/letportalidentity</li> </ul> </li> <li>[<code>-db|--db-type</code>]: Database type of a connection string. Default is <code>MongoDB</code>, can change to <code>SQLServer</code>, <code>PostgreSQL</code>, <code>MySQL</code></li> </ul>"},{"location":"cli/letportal-uninstall/#example","title":"Example","text":"<p>With default option, connection string = <code>mongodb://localhost:27017/letportal</code> and database type = <code>MongoDB</code></p> <pre><code>letportal portal uninstall\n</code></pre> <p>With database type and connection string</p> <pre><code>letportal portal uninstall -c mongodb://localhost:27017/letportal -db MongoDB\n</code></pre>"},{"location":"cli/letportal-upgrade/","title":"LET Portal CLI - upgrade","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"cli/letportal-upgrade/#name","title":"Name","text":"<p><code>letportal upgrade</code> - upgrade a new version of LET Portal</p>"},{"location":"cli/letportal-upgrade/#synopsis","title":"Synopsis","text":"<pre><code>letportal &lt;APP&gt; upgrade &lt;Version&gt; [-c|--connection] [-db|--db-type] [-f|--file]\n</code></pre>"},{"location":"cli/letportal-upgrade/#arguments","title":"Arguments","text":"<ul> <li><code>APP</code>: Current we only support two apps are <code>portal</code> or <code>identity</code></li> <li><code>Version</code>: Specific version which will be upgraded. Ex: 0.5.0</li> <li>[<code>-c|--connection</code>]: A connection string to database, if null, default value will be <ul> <li>With <code>portal</code>: mongodb://localhost:27017/letportal</li> <li>With <code>identity</code>: mongodb://localhost:27017/letportalidentity</li> </ul> </li> <li>[<code>-db|--db-type</code>]: Database type of a connection string. Default is <code>MongoDB</code>, can change to <code>SQLServer</code>, <code>PostgreSQL</code>, <code>MySQL</code></li> <li>[<code>-f|--file</code>]: Path to <code>tools.json</code> file</li> </ul>"},{"location":"cli/letportal-upgrade/#toolsjson","title":"tools.json","text":"<p>Location: src\\LetPortal.Tools\\tools.json</p> <p>Published Tools: Same folder of installation folder of CLI. </p> <p>This file is used to create three default database connections on Portal Database. There are <code>Identity Database</code>, <code>Portal Database</code> and <code>Service Management Database</code>.</p> <p>We separate to four options which are based on database type <code>MongoStoringConnections</code>, <code>PostgreSqlStoringConnections</code>, <code>SqlServerStoringConnections</code>, <code>MySqlStoringConnections</code>. Based on an argument [<code>-db</code>], CLI will take a relating option to insert. Thus you need to check carefully this file before running <code>install</code> command</p>"},{"location":"cli/letportal-upgrade/#example","title":"Example","text":"<p>With default option, connection string = <code>mongodb://localhost:27017/letportal</code> and database type = <code>MongoDB</code>, tools.json path = <code>Same as installation tools folder</code>. Upgrade version: 0.5.0</p> <pre><code>letportal portal upgrade 0.5.0\n</code></pre> <p>With database type and connection string, tools.json path = <code>Same as installation tools folder</code>. Upgrade version: 0.5.0</p> <pre><code>letportal portal upgrade 0.5.0 -c mongodb://localhost:27017/letportal -db MongoDB\n</code></pre>"},{"location":"configurations/chat-apis/","title":"Configurations - Chat APIs","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"configurations/chat-apis/#default-appsettingsjson","title":"Default appsettings.json","text":"<p>It locates in <code>src/web-apis/LetPortal.ServiceManagementApis/Files/Chat/v1.0</code></p> <p><code>json tab=\"appsettings.json\" {   \"ChatOptions\": {     \"AllowedHosts\": [       \"http://localhost:4200\"       // Put more your public domain for CORS, it is required for SignalR     ],     \"MaximumSessionsPerChatRoom\": 5, // Maximum chat sessions in-memory     \"ThresholdNumberOfMessages\": 50 // Maximum messages per session   },   \"VideoCallOptions\": {     \"IceServers\": [       // Add more ICE server such as STUN or TURN       {         \"Urls\": \"stun:stun1.l.google.com:19302\",         \"Username\": \"\",         \"Credential\": \"\"       }     ]   } }</code></p>"},{"location":"configurations/gateway-apis/","title":"Configurations - Gateway APIs","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"configurations/gateway-apis/#default-appsettingsjson","title":"Default appsettings.json","text":"<p>Because we are using Gateway Ocelot to route a calling HTTP, so you need to check on Ocelot Documentation</p>"},{"location":"configurations/identity-apis/","title":"Configurations - Identity APIs","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"configurations/identity-apis/#default-appsettingsjson","title":"Default appsettings.json","text":"<pre><code>{\n  \"ServiceOptions\": {\n    \"Name\": \"Identity\", // Unique name of service\n    \"Version\": \"v1.0\", // Current version, should be matched with version folder\n    \"ServiceManagementEndpoint\": \"http://localhost:56456\" // Service Management's endpoint\n  },\n  \"ConfigurationServiceOptions\": {\n    \"Endpoint\": \"http://localhost:56456/api/configurations\", // Service Configuration's endpoint\n    \"RetryCount\": 3, // Maximum number of call\n    \"DelayRetry\": 500 // Duration between two failed calls, in miliseconds\n  }\n}\n</code></pre>"},{"location":"configurations/identity-apis/#extended-appsettingsjson","title":"Extended appsettings.json","text":"<p>Location: src/web-apis/LetPortal.ServiceManagementApis/Files/Identity/v1.0</p> <p>Note</p> <p>We only highlight some options which are used for service's business. For another options, you need to check on Micro-Service Configuration   </p> <pre><code>{\n  \"DatabaseOptions\": {\n    \"ConnectionString\": \"mongodb://localhost:27017\", // Identity Database Connection string\n    \"DataSource\": \"letportalidentity\", // Database name\n    \"ConnectionType\": \"MongoDB\" // MongoDB or SQLServer or PostgreSQL or MySQL\n  },\n  \"JwtBearerOptions\": {\n    \"Secret\": \"9f3acfa82146f5e4a7dabf17c2b63f538c0bcffb8872e889367df2e2c23cef94\", // JWT Secret\n    \"Issuer\": \"letportal.app\", // JWT Issuer\n    \"Audience\": \"LetPortal\", // Audience\n    \"TokenExpiration\": 30, // Token expired time, in minute\n    \"RefreshTokenExpiration\": 45 // Refresh token expired time, in minute\n  },\n  \"EmailOptions\": {\n    \"SkipMode\": true, // Turn on or off Send Email when user register or forgot password\n    \"Host\": \"Your Mail Server\", // Your email server\n    \"Port\": 587, // SMTP port\n    \"EnableSSL\": true, // Allow SSL\n    \"UserName\": \"Your Mail Username\", // SMTP Account\n    \"Password\": \"Your Mail Password\", // SMTP Password\n    \"From\": \"email-noreply@sample.com\" // SMTP email\n  }\n}\n</code></pre>"},{"location":"configurations/multiple-environments/","title":"Configurations - Multiple Environments","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"configurations/multiple-environments/#angular-spa-web","title":"Angular SPA Web","text":"File name Description environment.ts Useful for developer's PC environment.local.ts Useful for deploying server-side on a same VM, it is created for Front-end Developer environment.docker.ts Useful for deploying server-side on Docker, you need to check a <code>configurationEndpoint</code> that matches public endpoint of server-side environment.dockerlocal.ts Useful for deploying server-side on Docker as the same PC, it is created for Front-end Developer environment.prod.ts Useful for Production environment.prodlocal.ts Useful for Production when deploying on intranet (Local DNS)"},{"location":"configurations/multiple-environments/#new-environment","title":"New environment","text":"<p>First, you create a new file <code>environment.{your_env}.ts</code>, then you need to add your new environment on <code>angular.json</code> file. Two places are:</p> <p>``` json tab=\"configurations\" {     \"projects\": {         \"architect\": {             \"configurations\":{                 \"your_new_env\": {                     // You should copy \"prod\" property to put here                 }             }         }     } } <pre><code>``` json tab=\"serve\"\n{\n    \"projects\": {\n        \"architect\": {\n            \"serve\":{\n                \"configurations\": {\n                    \"your_new_env\": {\n                        \"browserTarget\": \"web-portal:build:{your_new_env}\"\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre></p>"},{"location":"configurations/multiple-environments/#net-core-api","title":".NET Core API","text":"File Name Description appsettings.json Useful for developer's PC appsettings.Development.json Same above appsettings.Local.json Useful for deploying one VM both Staging and Production appsettings.Docker.json Useful for running on Docker both Staging and Production appsettings.DockerLocal.json Useful for running on Docker and accessable from Host, for Dev <p>Production file</p> <p>You will ask for Production file. Regarding to your deployment model, you need to copy an appropriate appsettings.json to <code>appsettings.Production.json</code>. For example: you choose to deploy on one VM, so you should copy <code>appsettings.Local.json</code> to <code>appsettings.Production.json</code>. We strongly recommend this way because you will face a lot of changes on Production file.</p>"},{"location":"configurations/portal-apis/","title":"Configurations - Portal Apis","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"configurations/portal-apis/#default-appsettingsjson","title":"Default appsettings.json","text":"<p>Beacuse Portal APIs is a core api so that we will group some options following features</p>"},{"location":"configurations/portal-apis/#database-options","title":"Database Options","text":"<pre><code>{\n    \"DatabaseOptions\": {\n        \"ConnectionString\": \"mongodb://localhost:27017\", // Identity Database Connection string\n        \"DataSource\": \"letportal\", // Database name\n        \"ConnectionType\": \"MongoDB\" // MongoDB or SQLServer or PostgreSQL or MySQL\n    }\n}\n</code></pre>"},{"location":"configurations/portal-apis/#mongooptions-and-mapperoptions","title":"MongoOptions and MapperOptions","text":"<pre><code>{\n    // Allow to remove double quotes while transforming to Bson\n    \"MongoOptions\": {        \n        \"AllowedFunctions\": [ \"ObjectId\", \"ISODate\", \"NumberLong\" ] \n    },\n    // Define mapping between C# data type and SQL data type\n    \"MapperOptions\": {\n        \"MySQL\": {\n            \"decimal\": \"Decimal\",\n            \"double\": \"Double\",\n            \"float\": \"Float\",\n            \"timespan\": \"Int64\",\n            \"long\": \"Int64\",\n            \"int\": \"Int32\",\n            \"bool\": \"Bit\",\n            \"date\": \"Datetime\",\n            \"string\": \"LongText\"\n        },\n        \"PostgreSQL\": {\n            \"decimal\": \"Money\",\n            \"double\": \"Double\",\n            \"float\": \"Double\",\n            \"timespan\": \"Bigint\",\n            \"long\": \"Bigint\",\n            \"int\": \"Integer\",\n            \"bool\": \"Boolean\",\n            \"date\": \"Date\",\n            \"string\": \"Text\"\n        },\n        \"SQLServer\": {\n            \"decimal\": \"Decimal\",\n            \"double\": \"Float\",\n            \"float\": \"Float\",\n            \"timespan\": \"BigInt\",\n            \"long\": \"BigInt\",\n            \"int\": \"Int\",\n            \"bool\": \"Bit\",\n            \"date\": \"DateTime\",\n            \"string\": \"NVarChar\"\n        }        \n    }\n}\n</code></pre>"},{"location":"configurations/portal-apis/#file-options","title":"File Options","text":"<p>FileOptions is helping you to configure File APIs. We are only supporting DiskStorage and Database Storage, another storage can be extended out-of-the-box</p> <pre><code>{ \n    \"FileOptions\": {\n        \"FileStorageType\": \"Database\", // Database or Disk\n        \"DownloadableHost\": \"http://localhost:53595/v1.0/files\", // A public endpoint of File APIs, which can access from a client\n        \"DiskStorageOptions\": {     \n            \"AllowDayFolder\": true, // Create sub folder with name is 'yyyyMMdd'\n            \"Path\": \"~/UploadFiles\" // Path of folder\n        }\n    },\n    \"DatabaseStorageOptions\": {\n        \"SameAsPortal\": true, // true if the connection is the same with Portal Database\n        // If SameAsPortal is false, use the connection below\n        \"DatabaseOptions\": {\n            \"ConnectionString\": \"mongodb://localhost:27017\", // Database Connection string\n            \"DataSource\": \"uploaddb\", // Database name\n            \"ConnectionType\": \"MongoDB\" // MongoDB or SQLServer or PostgreSQL or MySQL\n        }\n    },\n    \"FileValidatorOptions\": {\n        \"MaximumFileSize\": 16777216, // Maximum Upload File size, in bytes, Default is 16MB\n        \"CheckFileExtension\": true, // Check upload file ext on WhiteLists\n        \"WhiteLists\": \"jpg;jpeg;gif;png;json;zip;\",\n        // Check upload file magic number\n        \"ExtensionMagicNumbers\": {\n            \"jpg\": \"FF-D8\",\n            \"jpeg\": \"FF-D8\",\n            \"gif\": \"47-79-46-38\",\n            \"bmp\": \"42-4D\",\n            \"tif\": \"49-49\",\n            \"png\": \"89-50-4E-47\",\n            \"ico\": \"00-00-01-00\",\n            \"mp3\": \"49-44-33\",\n            \"avi\": \"52-49-46-46\",\n            \"mp4\": \"00-00-00-18-66-74-79-70-6D-70-34-32\",\n            \"zip\": \"50-4B-03-04\",\n            \"gz\": \"1F-8B-08\",\n            \"tar\": \"75-73-74-61-72\",\n            \"dll\": \"4D-5A\",\n            \"exe\": \"4D-5A\",\n            \"pdf\": \"25-50-44-46\",\n            \"doc\": \"D0-CF-11-E0-A1-B1-1A-E1\",\n            \"rtf\": \"7B-5C-72-74-66-31\",\n            \"xls\": \"D0-CF-11-E0-A1-B1-1A-E1\",\n            \"ppt\": \"D0-CF-11-E0-A1-B1-1A-E1\",\n            \"docx\": \"50-4B-03-04\",\n            \"xlsx\": \"50-4B-03-04\",\n            \"pptx\": \"50-4B-03-04\",\n            \"txt\": \"\",\n            \"json\": \"\"\n        }\n    }\n  }\n}\n</code></pre>"},{"location":"configurations/portal-apis/#backup-options","title":"Backup Options","text":"<pre><code>{\n    \"BackupOptions\": {\n        \"BackupFolderPath\": \"Backups\", // Folder for creating backup package\n        \"RestoreFolderPath\": \"Restores\", // Folder for uploading backup package \n        \"MaximumObjects\": 100 // Number of backup objects, default is 100, very important to memory leak\n    }\n}\n</code></pre>"},{"location":"configurations/service-management-apis/","title":"Configurations - Service Managment Apis","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"configurations/service-management-apis/#default-appsettingsjson","title":"Default appsettings.json","text":""},{"location":"configurations/service-management-apis/#servicemanagementoptions","title":"ServiceManagementOptions","text":"<p>This options is used for configuring Background jobs:</p> <ul> <li>Update Lost status: Lost status will be set if no response time is greater than <code>DurationLost</code>, a job will be triggered after <code>IntervalLost</code> seconds</li> <li>Update Shutdown status: Shutdown status will be set if a service is Lost status and no response time is greater than <code>DurationShutdown</code>, a job will be triggered after <code>IntervalShutdown</code> seconds</li> <li>Update Monitor Report: alll data have reported time is less than (Now - <code>DurationMonitorReport</code> seconds) will be calculated for report, a job will be triggered after <code>IntervalMonitorReport</code> seconds</li> </ul> <pre><code>{\n \"ServiceManagementOptions\": {\n    \"DurationLost\": 120,\n    \"DurationShutdown\": 120,\n    \"DurationMonitorReport\": 60,\n    \"IntervalLost\": 60,\n    \"IntervalShutdown\": 60,\n    \"IntervalMonitorReport\": 60\n  }   \n}\n</code></pre>"},{"location":"configurations/service-management-apis/#centralizedlogoptions","title":"CentralizedLogOptions","text":"<p>We use this option for collecting service's logs. However, we only support MongoDB databse as centralized logs</p> <pre><code>{\n    \"CentralizedLogOptions\": {\n        \"Database\": {\n            \"ConnectionString\": \"mongodb://localhost:27017\",\n            \"Datasource\": \"logs\",\n            \"ConnectionType\": \"MongoDB\"\n        },\n        \"EntityLogName\": \"servicelogs\"\n    }\n}\n</code></pre>"},{"location":"configurations/spa-web/","title":"Configurations - SPA Web","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"configurations/spa-web/#client-configuration-file","title":"Client configuration file","text":"<p>Same with most Angular projects, we have some environment.ts files on <code>environments</code> folder.</p> <p></p> <p>Each environment file is used to run on specific environment such as <code>local</code>, <code>docker</code>, etc. But we will come back this on Multiple Environments</p> <p>Now open one environment file and you will see a data structure</p> <pre><code>export const environment = {\n  production: false, // Enable to true when we deploy on Production\n  version: \"0.0.5\", // Current deployed version, useful to track user's version\n  configurationEndpoint: \"http://localhost:53595/v1.0/api/configurations/Portal/v1.0\", \n  // Where to get Server configuration file\n  ignoreSendTokenEndpoints: \"api/accounts/login;api/accounts/refresh;api/accounts/forgot-password;api/accounts/recovery-password\",\n  // Ignore attach JWT token to HTTP Header when calling HTTP\n  chatOptions: {\n    allowFileTypes: 'jpg;jpeg;gif;png;zip;rar;doc;docx;xls;xlsx;pdf', // Chat Attachment file\n    maxFileSizeInMb: 16 // Chat attachment file size\n  }\n};\n</code></pre>"},{"location":"configurations/spa-web/#server-configuration-file","title":"Server configuration file","text":"<p>LET Portal not only provides client-configuration file but also server-cofiguration file for SPA Web. A main reason is a complexity of multiple environments on server-side. Nowaday, we always have at least three environments such as Local, Staging and Production. </p> <p>If you keep these configurations that belong to server-side such as service's endpoints, Consumer Key/Secret, feature toggles on client-side, you will jump into a hole. So an easiest solution is letting server-side to handle it and return when SPA web wants.</p> <p>File Location: src/web-apis/LetPortal.ServiceManagementApis/Files/Portal/v1.0</p> <p>There are some configuration files that are supporting to deploy Multiple Environments. However, they have a same data structured:</p> <pre><code>{\n  \"portalBaseEndpoint\": \"http://localhost:53595/v1.0\",// Base endpoint of Portal APIs\n  \"chatBaseEndpoint\": \"http://localhost:51622\",// Base endpoint of Chat APIs\n  \"identityBaseEndpoint\": \"http://localhost:51620\"// Base endpoint of Identity APIs\n}\n</code></pre>"},{"location":"deep-dive/app-package/","title":"Deep Dive - App Installation & Package","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"deep-dive/app-package/#what-is-app-in-let-portal","title":"What is App in LET Portal?","text":"<p>An app in LET Portal is a package which contains all references to Standard, Dynamic List, Chart and Page. Also, app is used to seperate an area to indicate group of functions.</p> <p>App also has one Menu which can help user to navigate around itself.</p> <p>Now what happened if you have an idea for moving one app to another environment? LET Portal will help you via App Package &amp; Installation function</p>"},{"location":"deep-dive/app-package/#app-package","title":"App Package","text":"<p>Note: All references must be set in Builder page (such as Standard Builder page, Dynamic List Builder page, etc.)</p> <p>On Apps Management page, you can access Package function via archive icon in list.</p> <p></p> <p>You just check all reference components in the page, type the package description and then clicking on Create button to generate Zip package.</p> <p></p>"},{"location":"deep-dive/app-package/#app-installation","title":"App Installation","text":"<p>After you got a package, you can install it in another environment. </p> <p>On Apps Management page, you can access Install function via Install button in list</p> <p></p> <p>You need to upload a package to let system check, then you can click Install button to proceed installation.</p> <p></p> <p>Note</p> <p>If it appears warning icon, so that means an app has been existed in target environment. So when you click on Install button, you will be asked to choose way of installation: Wipe or Merge</p>"},{"location":"deep-dive/built-in-methods/","title":"Deep Dive - Built-in methods","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"deep-dive/built-in-methods/#what-is-built-in-method","title":"What is built-in method?","text":"<p>Sometimes you see an interpolation <code>{{ }}</code> isn't enough function to help you manipulate a data before they translate into real value. For example: you want to insert a current date into database. So that LET Portal is building a lot of built-in methods to help you fill this.</p>"},{"location":"deep-dive/built-in-methods/#built-in-methods-cheatsheet","title":"Built-in methods Cheatsheet","text":"Method Description Params Translated value Usage <code>currentDate()</code> Get a current local date as UTC string None \"Wed, 04 Mar 2020 16:54:17 GMT\" Very useful on SQL, ex: <code>modifiedDate={{currentDate()|date}}</code> <code>currentISODate()</code> Get a current local date as ISODate string None \"2020-03-04T16:56:28.308Z\" Very useful on MongoDB, ex: <code>modifiedDate: ISODate('{{currentISODate()}}'</code>) <code>currentTick()</code> Get a current local date as long tick None 621355967995800000 Very useful on Timestamp field, ex: <code>timestamp={{currentTick()|long}}</code> <code>guid()</code> Generate GUID string None \"930ac896-d2e9-4786-ae75-00c9452b8707\" Very useful on some unique field <code>toJsonString(param1)</code> Serialize one object to string Param1: <code>object|any</code> <code>\"{'data':'abc'}\"</code> Very useful on some json string fields"},{"location":"deep-dive/chart/","title":"Deep Dive - Chart","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"deep-dive/chart/#preparation-knowledge","title":"Preparation knowledge","text":"<p>Before you read, please ensure you must complete this step. This step will help you to a basic knowledge about Dynamic List Component.</p> <p>Warning</p> <p>We assume you have an experience to work with LET Portal, at least login/menu and how to redirect. We just provide some short steps for letting you know a main points</p>"},{"location":"deep-dive/chart/#chart-info","title":"Chart Info","text":"<p>We only highlight two complicated fields which are Chart Type and Mapping Projection</p> <p>On LET Portal, we are using ngx-charts for rendering Chart. So that a format data must be two models below. Note: A data must be an array </p> <p>``` json tab=\"Simple\" [{     name: 'name',     value: 'value'  }] <pre><code>``` json tab=\"Grouped\"\n[{\n    name: 'name',\n    series: [\n        {\n            name: 'name',\n            value:'value'\n        }\n    ]   \n}]\n</code></pre></p> <p>Tip</p> <p>According to ngx-charts, x axis will be <code>name</code> and y axis will be <code>value</code> on mapping projection.</p> <p>Based on json data, Mapping Projection is used to map a data when you query on database.</p>"},{"location":"deep-dive/chart/#mapping-data-example-of-simple","title":"Mapping data - Example of Simple","text":"<p>For example of Simple chart, a response data from server-side is</p> <p>``` json tab=\"Database response\" {     result: [         {             text: 'Success',             count: 18         },         {             text: 'Fail',             count: 0         }     ] } <pre><code>Then with mapping projection is `name=text;value=count`, LET Portal will take an array of `result` property to project. A data will be\n\n``` json tab=\"Chart data\"\n[\n    {\n        name: 'Success',\n        value: 18\n    },\n    {\n        name: 'Fail',\n        value: 0\n    }\n]\n</code></pre></p>"},{"location":"deep-dive/chart/#mapping-data-example-of-grouped","title":"Mapping data - Example of Grouped","text":"<p>With Grouped, <code>group</code> of mapping projection represents to <code>name</code> of Grouped Json.</p> <p>For example</p> <p>``` json tab=\"Database response\" {     result: [         {             text: 'Success',             count: 18,             monitor: 'HTTP'         },         {             text: 'Fail',             count: 0,             monitor: 'Memory'         }     ] } <pre><code>With mapping projection is `name=text;value=count;group=monitor`, a chart data is\n\n``` json tab=\"Chart data\"\n[\n    {\n        name: 'HTTP',\n        series: [\n            {\n                name: 'Success',\n                value: 18\n            }\n        ]\n    },\n    {\n        name: 'Memory',\n        series: [\n            {\n                name: 'Fail',\n                value: 0\n            }\n        ]\n    }\n]\n</code></pre></p> <p>For Simple Chart, Chart Type don't have a Grouped name, otherwise it has.</p> <p>You also can prefer this link above to see a sample chart</p>"},{"location":"deep-dive/chart/#datasource","title":"Datasource","text":"<p>Based on a required data for Chart, LET Portal is supporting two database types are <code>MongoDB</code> and <code>SQL-Based</code>. You can read these sections for How to query database</p> <ul> <li>MongoDB here</li> <li>SQL here</li> </ul>"},{"location":"deep-dive/chart/#options","title":"Options","text":""},{"location":"deep-dive/chart/#how-to-setup-real-time-chart","title":"How to setup real-time chart","text":"<p>We only focus on how to setup real-time chart by some options. Let's take a look on 3 options below:</p> <ul> <li><code>allowrealtime</code>: Enable real-time chart. Default: false. </li> <li><code>timetorefresh</code>: A duration to refresh a chart, on seconds. Default: 60</li> <li><code>comparerealtimefield</code>: A date field MUST be used to compare with (NOW - timetorefresh). Default: empty</li> </ul> <p>We have two real-time types, one is interval refresh and one is sequential data nearest <code>NOW</code>. Also you need to read MongoDB and SQL for typing Query</p> <p>SQL</p> <p>You need to put <code>{{REAL_TIME}}</code> word on your SQL because it helps LET Portal to generate a real-time condition</p>"},{"location":"deep-dive/chart/#interval-refresh-data","title":"Interval refresh data","text":"<p>This real-time report type is a report will spam many requests in interval time. There are no changing number of records on <code>result</code>.</p> <p>For this setup, you only set <code>allowrealtime</code> to true and <code>timetorefresh</code> to 60. Ensure <code>comparerealtimefield</code> is <code>NULL</code>.</p> <p>LET Portal will recall a query after <code>timetorefresh</code> seconds.</p> <p>Usage</p> <p>Interval refresh data is very useful for calculated report such as: Sale report, Revenue, etc. In the example below, it is a grouped HTTP counters of one service. </p> <p></p>"},{"location":"deep-dive/chart/#sequential-data","title":"Sequential data","text":"<p>This real-time chart type is a report will try to get more and more data from time to time. The number of records is very different per call.</p> <p>For this setup, you set <code>allowrealtime</code> to true and <code>timetorefresh</code> to 60. Ensure <code>comparerealtimefield</code> is A datetime field on database. LET Portal will help you to get data based on this field, by use some advanced techniques.</p> <p>Maximum records per call</p> <p>Ensure you have to set a <code>{ $limit: x }</code> for MongoDB or <code>TOP x records</code> for SQL. This will help you to keep <code>x axis</code> has maximum <code>x</code> checkpoints. We always maintain maximum checkpoints on x axis, older data will be removed.</p> <p>Now let take a look on this flow below to help you know a Sequential data.</p> <p></p> <p>This is one example of Sequential data which we used on LET Portal.</p> <p></p>"},{"location":"deep-dive/chart/#set-min-max-for-number-range","title":"Set Min Max for number range","text":"<p>If you have a requirement for setting min max value for x and y, you can enter <code>x=[0,100];y=[0,1000]</code> on <code>datarange</code> field</p>"},{"location":"deep-dive/chart/#format-date-value","title":"Format date value","text":"<p>We use momentjs to format a x axis value. You should enter a format pattern on <code>xformatdate</code>. For example, you want to display a real-time chart only Hour and Minute, so you should enter <code>HH:mm</code>.</p>"},{"location":"deep-dive/chart/#styling-chart","title":"Styling chart","text":"<p><code>colors</code> option will help you to style your chart. You can use style theme or custom colors array by yourself.</p> <ul> <li>Custom colors: you can enter <code>[\"red\",\"blue\",\"yellow\"]</code></li> <li>Style theme: many available themes are <code>[\"vivid\"]</code> <code>[\"natural\"]</code> <code>[\"horizon\"]</code> , etc. You can see themes on ngx-charts page.</li> </ul>"},{"location":"deep-dive/chart/#chart-filters","title":"Chart Filters","text":"<p>If you have a requirement for filtering chart data such as Display report between August 2019 and August 2020 or Display sale report has a revenue more than 10 milions, so Chart Filter are yours.</p> <p>Limitation</p> <p>Chart Filter can't be applied for Sequential data and you need to put <code>{{FILTER}}</code> on your SQL</p> <p>As Dynamic List or Standard, we also provide Population Filters for Chart. It will help you to generate quickly a Chart Filter based on example result.</p> <p></p>"},{"location":"deep-dive/chart/#chart-filter-options","title":"Chart Filter Options","text":"<p>After you populate chart filters, you can edit this filter by clicking on icon Edit on the same row</p> <p></p>"},{"location":"deep-dive/chart/#control-types","title":"Control Types","text":"Control Name Allow Multiple Range Value Default Value Checkbox No Select Yes Any value based on Datasource NumerPicker Yes [0,1,2] or [0..1] or [0..2..10] or ['0-10', '11-20'] 0 or '0-10' or [0,1] or ['0-10'] DatePicker Yes Blank or['1970-01-01'] or ['Now'] or ['Now-5'] or ['Now+5'] or ['1970-01-01', '2020-02-02'] or ['1970-01-01', 'Now'] Any value on Range MonthYearPicker Yes Blank or ['2020-02'] or ['Now'] or ['Now-5'] or ['Now+5'] or ['1970-01', 'Now'] '2020-02' or ['2020-02','2020-03']"},{"location":"deep-dive/chart/#numberpicker","title":"NumberPicker","text":"<p>NumberPicker allows you to generate a Selector with shortcut datesource. Let's go one by one of Range value. </p> <p>Note</p> <p>There are no different between Single and Multiple Choice on NumberPicker</p> <pre><code>[0,1,2] =&gt; [0,1,2]\n\n[0..5] =&gt; [0,1,2,3,4,5] // Speard out start-end\n\n[0..2..10] =&gt; [0,2,4,6,10] // Speard out start-end with increasing number\n\n['0-10','11-20'] =&gt; ['0-10','11-20'] // Allow choose different number range\n</code></pre>"},{"location":"deep-dive/chart/#datepicker","title":"DatePicker","text":"<p>DatePicker allows you to generate a single DatePicker control or two DatePicker controls for <code>Start Date</code> and <code>End Date</code>. You can use <code>Range Value</code> to set min-max date value on each DatePicker</p> <p>Multiple</p> <p><code>Is Multiple</code> is <code>true</code> that means a DatePicker filter is a start-end DatePicker</p> <pre><code>Blank // Min=1970-01-01 Max=Now \n\n['1971-01-01'] //Min=1971-01-01 Max=Now + 30 years\n\n['Now'] //Min=Now Max=Now + 30 years\n\n['Now-5'] //Min=Now - 5d Max=Now + 30 years\n\n['Now+5'] //Min=Now + 5d Max=Now + 30 years \n\n['1971-01-01', '2020-02-02'] //Min=1971-01-01 Max=2020-02-02\n</code></pre> <p>Now</p> <p><code>Now</code> is a keyword to help LET Portal get a current Date</p>"},{"location":"deep-dive/chart/#monthyearpicker","title":"MonthYearPicker","text":"<p>MonthYearPicker allows you to generate a single MonthYearPicker control or two MonthYearPicker controls for <code>Start Month</code> and <code>End Month</code>. You can use <code>Range Value</code> to set min-max month value on each MonthYearPicker</p> <p>Multiple</p> <p><code>Is Multiple</code> is <code>true</code> that means a MonthYearPicker filter is a start-end MonthYearPicker</p> <pre><code>Blank // Min=1970-01 Max=Month of Now \n\n['1971-01'] //Min=1971-01 Max=Month of (Now + 30 years)\n\n['Now'] //Min=Month of Now Max=Month of (Now + 30 years)\n\n['Now-5'] //Min=Month of (Now - 5 months) Max=Month of (Now + 30 years)\n\n['Now+5'] //Min=Month of (Now + 5 months) Max=Month of (Now + 30 years)\n\n['1971-01', '2020-02'] //Min=1971-01 Max=2020-02\n</code></pre> <p></p>"},{"location":"deep-dive/dynamiclist/","title":"Deep Dive - Dynamic List","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"deep-dive/dynamiclist/#preparation-knowledge","title":"Preparation knowledge","text":"<p>Before you read, please ensure you must complete this step. This step will help you to a basic knowledge about Dynamic List Component.</p> <p>Warning</p> <p>We assume you have an experience to work with LET Portal, at least login/menu and how to redirect. We just provide some short steps for letting you know a main points</p>"},{"location":"deep-dive/dynamiclist/#dynamic-list-info","title":"Dynamic List Info","text":""},{"location":"deep-dive/dynamiclist/#options","title":"Options","text":"<p>These options are used to turn on/off some features on Dynamic List. We will list out some important options instead of all, because we already attach Hint to option.</p> <p></p> Key Value Default Value Hint Note enablesearh true/false true Display search textbox to filter data by keyword enableadvancedsearch true/false true Display Advanced filter Can work without enablesearch is false enablepagination true/false true Allow user to paginate data enableexportexcel true/false true Allow user to export excel file maximumclientexport number 100 Maximum records which are exported to excel Impact to client performance, so best value range is 100-300 allowexporthiddenfields true/false true Allow export some hidden fields"},{"location":"deep-dive/dynamiclist/#database-columns","title":"Database &amp; Columns","text":""},{"location":"deep-dive/dynamiclist/#database","title":"Database","text":"<p>There are no special here, it is a query that helps you to populate columns quickly. Note: this query is using to query your data and LET Portal will combine with filters to get a data. Read mongodb or sql for more detail.</p>"},{"location":"deep-dive/dynamiclist/#columns","title":"Columns","text":"<p>Order Columns</p> <p>You can drag &amp; drop column to order columns, try it now !!!</p> <p>Each column can be configured with these settings below:</p> <ul> <li>Display Name: Header name of this column</li> <li>Display Format: We are using C# string format to format a string. You can choose in the list or customizing your format.</li> <li>Display HTML: When it is true, you can input HTML tag on Display Format. For example: <code>&lt;span style=\"color: red;\"&gt; {0} &lt;/span&gt;</code> for styling red color</li> <li>Allow Sort: allow user to sort data ascending or descending</li> <li>Search Text: allow column can be filtered by keyword</li> <li>Search Advanced: Combine with Field Type, this column will appear on Advanced Filter with specific control type.</li> <li>Field Type: Choose a control type to use for filtering column data on Advanced mode.</li> </ul> <p></p>"},{"location":"deep-dive/dynamiclist/#special-field-types","title":"Special field types","text":"<p>At the moment, we only have on special field type. This is Select control. When a column has Select field type, you can configure a datasource for this select by clicking on \"Edit Datasource\" button (Only appear for Select type)</p> <p>For example, there are two referencing places that are:</p> <ul> <li>For Database Datasource, you can see Roles column on Users List</li> <li>For Static Datasource, you can see Connection Type column on Databases List </li> </ul> <p></p>"},{"location":"deep-dive/dynamiclist/#commands","title":"Commands","text":"<p>Dynamic List is grouping command buttons into two position types: Outside and In List</p> Position Different Outside You can't touch any data, we recommend to use it for redirecting or calling some HTTP Service, don't have icon property In List You can do all features with this button <p>These command buttons can do three action types:</p>"},{"location":"deep-dive/dynamiclist/#redirect-action-type","title":"Redirect Action Type","text":"<p>You can type a raw url on Redirect Url field or you can select page to help you fill an url.</p> <p>You also pass a data to target url by using double curly braces {{ }}. For example, you want to pass id into url, just type <code>portal/page/app-form?id={{data.id}}</code>. </p> <p>Note</p> <p>On Dynamic List, you want to pass a row data, you need to access via data word</p>"},{"location":"deep-dive/dynamiclist/#execute-database-action-type","title":"Execute Database Action Type","text":"<p>Prefer to mongodb or sql</p>"},{"location":"deep-dive/dynamiclist/#http-service-action-type","title":"Http Service Action Type","text":"<p>We are still developing this feature.</p>"},{"location":"deep-dive/expression/","title":"Deep Dive - Expression","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"deep-dive/expression/#what-is-expression","title":"What is Expression?","text":"<p>Expression is a comparison string which must be equal <code>true</code> or <code>false</code>. It will be executed on client side so this uses Javascript syntax.</p> <p>Usage: Many controls, filters have to use Expression to configure properties.</p>"},{"location":"deep-dive/expression/#available-global-variables","title":"Available Global Variables","text":"<p>On expression string, you can access some global variables to help evalute. There are some global variables:</p>"},{"location":"deep-dive/expression/#user","title":"user","text":"<p>Description: it helps you to get signed user info.</p> <p>Object structure:</p> <p><pre><code>{\n    \"userid\": \"1234\",\n    \"username\": \"admin\",\n    \"roles\": [\"SuperAdmin\"],\n    \"claims\": [\n        {\n            \"name\": \"apps\",\n            \"claims\": [\"core\"]\n        }\n    ]\n}\n</code></pre> Example: <code>user.username == 'SuperAdmin'</code></p>"},{"location":"deep-dive/expression/#configs","title":"configs","text":"<p>Description: it prefer to Portal Configuration which SPA gets before Angular Bootstrap runs Object Structure:</p> <pre><code>{\n    \"portalBaseEndpoint\": \"http://letportal.app\",\n    \"identityBaseEndpoint\": \"http://id.letportal.app\"\n}\n</code></pre> <p>Example: <code>configs.portalBaseEndpoint != null</code></p>"},{"location":"deep-dive/expression/#queryparams","title":"queryparams","text":"<p>Description: it prefer to Querystring parameters on current Url. For example: <code>portal/page/user-form?id=123</code> so we will have <code>queryparams.id</code> is <code>123</code></p> <p>Object Structure:</p> <pre><code>{\n    \"param1\": \"\"\n}\n</code></pre> <p>Example: <code>queryparams.id != null</code></p>"},{"location":"deep-dive/expression/#claims","title":"claims","text":"<p>Description: it helps you to indicate Claims of current Page with current user have <code>true</code> or <code>false</code></p> <p>Object Structure:</p> <pre><code>{\n    \"allowaccess\": true,\n    \"allowsubmit\": true\n}\n</code></pre> <p>Example: <code>claims.allowaccess == true</code></p>"},{"location":"deep-dive/expression/#options","title":"options","text":"<p>Description: it helps you to get Options of currentPage. Object Structure:</p> <pre><code>{\n    \"option1\": \"abc\"\n}\n</code></pre> <p>Example: <code>options.option1 == 'abc'</code></p>"},{"location":"deep-dive/expression/#data-on-standard","title":"data - On Standard","text":"<p>Description: it helps you to read State Management data</p> <p>Object Structure</p> <pre><code>{\n    \"userId\": \"abc\",\n    \"userName\": \"xyz\"\n}\n</code></pre> <p>Example: <code>data.userId == 'abc'</code></p>"},{"location":"deep-dive/expression/#data-on-dynamic-list","title":"data - On Dynamic List","text":"<p>Description: it helps you to read current row data on each row in Dynamic List</p> <p>Object Structure</p> <pre><code>{\n    \"name\": \"abc\",\n    \"version\": \"123\"\n}\n</code></pre> <p>Example: <code>data.name == 'abc'</code></p> <p></p>"},{"location":"deep-dive/localization/","title":"Deep Dive - Localization","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"deep-dive/localization/#how-localization-works","title":"How Localization works","text":"<p>LET Portal seperates localiztion into two sets: one in source code and one in app localization.</p> <ul> <li>Source code: we are using ngx-translate to perform translation, we stores all locale files in <code>assets\\i18n\\*.js</code>.</li> <li>App: we create one localization page for collecting all translable strings of related components. LET Portal will help you to collect all translable strings such as control label, validation message, etc.</li> </ul>"},{"location":"deep-dive/localization/#default-locale","title":"Default Locale","text":"<p>By default, LET Portal will get a setting in <code>environment.ts</code> file.</p> <pre><code>{\n \"localization\":{\n    // Look up en-Us.js file in assets\\i18n folder\n    \"defaultLanguage\": 'en-Us',\n    // Allow user to switch language, it is global scope\n    \"allowSwitchLanguage\": true,\n    // Datasource for language select at login page\n    \"allowedLanguages\": [\n      { name: 'English', value: 'en-Us' },\n      { name: 'Ti\u1ebfng Vi\u1ec7t', value: 'vi-VN' }\n    ]\n  }\n}\n</code></pre> <p>Note</p> <p>Currently we are constructing with EN and VI (my mother tongue)</p>"},{"location":"deep-dive/localization/#create-new-locale","title":"Create New Locale","text":"<p>First, you need to add one code in <code>allowedLanguages</code> section in <code>environment.ts</code> file.</p> <p>Second, move to Apps Management and then click on locale icon.</p> <p>Third, click on Create button to move to Localization Builder page</p> <p>Fourth, pick one locale and then click Collect button to generate all translable strings</p> <p>Then you just edit one by one string. After you complete all strings, click Save button.</p> <p></p> <p>Regenerate after changed something</p> <p>If you add/remove some controls in Standard, or add new page, you can click on Collect again to regenerate (but all existed strings will be kept)</p>"},{"location":"deep-dive/localization/#move-localization-to-new-environment","title":"Move localization to new environment","text":"<p>You can create <code>json</code> file for cloning to new environment. </p> <p>First, edit one locale, then click on Backup button to generate <code>*.json</code> file</p> <p>Second, in new environment you should go to a localization builder page, then clicking on Restore button, choose your <code>json</code> file.</p> <p>Third, you can click on Collect button to merge a current environment with restored locale.</p> <p></p>"},{"location":"deep-dive/mongodb/","title":"Deep Dive - Work with MongoDB","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"deep-dive/mongodb/#preparation-knowledge","title":"Preparation knowledge","text":"<p>We recommend you to read carefully some sections below before you read more steps on this document:</p> <ul> <li>Page concept link</li> <li>State Management link</li> <li>Global variables link</li> </ul>"},{"location":"deep-dive/mongodb/#aggregation-pipeline","title":"Aggregation Pipeline","text":"<p>We choose Aggregation MongoDB for most of queries on LET Portal. However, LET Portal will provide some customs which help you to reduce a complexity of BsonDocument.</p> <p>LET Portal is providing a platform for helping reduce a complexity and time. Basically, we will provide many examples for guiding you to create Dynamic List, Standard, Chart instead of wring a lot of codes. So you don't want to worry about Aggregation Pipeline. Only thing you want to learn deep-dive on MongoDB when you have a complexity query.</p> <p>Recommendation</p> <p>Due to MongoDB BsonDocument, many developers got confusion on learning Aggregation Pipeline. So we strongly recommend you to install MongoDB Compass to play around with MongoDB before you execute. When you have enough knowledge of Aggregation Pipeline, then let's explore this documentation</p>"},{"location":"deep-dive/mongodb/#bsondocument-problems-on-let-portal","title":"BsonDocument - Problems on LET Portal","text":"<p>BsonDocument looks like JsonDocument but they have some differents. One of most different is Bson supports a function without <code>\"</code> and Json doesn't. Unfortunately, LET Portal only has Json Editor (an open-source project) for inputting Bson. </p> <p>Due to a problem <code>\"</code>, we help you to eliminate <code>\"</code> when executing on MongoDB. There are some common functions which will be eliminated <code>\"</code>:</p> <ul> <li><code>ObjectId</code></li> <li><code>ISODate</code></li> <li><code>NumberLong</code></li> </ul> <p>``` json tab=\"Json\" {     \"id\": \"ObjectId('{{data.id}}')\" } <pre><code>``` bson tab=\"Bson\"\n{\n    \"id\": ObjectId('{{data.id}}')\n}\n</code></pre></p>"},{"location":"deep-dive/mongodb/#interpolation","title":"Interpolation {{}}","text":"<p>For binding data from Global Variables, you need to use <code>{{ }}</code> on your Json.</p> <p>By default, you can bind data as string, except <code>Object</code> type.</p> <p>For example with basic type</p> <p>``` json tab=\"basic type\" {     \"id\": \"ObjectId('{{data.id}}')\" } <pre><code>``` bson tab=\"translate\"\n{\n    \"id\": ObjectId('abc')\n}\n</code></pre></p> <p>For example with <code>Object</code> type</p> <p>``` json tab=\"Object type\" {     \"user\": \"{{data}}\" } <pre><code>``` bson tab=\"Translate\"\n{\n    \"user\": {\n        \"id\": \"abc\",\n        \"name\": \"xyz\"\n    }\n}\n</code></pre></p>"},{"location":"deep-dive/mongodb/#command-types","title":"Command Types","text":"<p>As we said, LET Portal provide a custom Json which helps you to work easier with MongoDB. Let's check the screenshot below</p> <p></p> <p>(1): This is a command types, we are four types: <code>$query</code>, <code>$insert</code>, <code>$update</code>, <code>$delete</code></p> <p>(2): This is an effective collection name on chosen Database</p>"},{"location":"deep-dive/mongodb/#result-format","title":"Result format","text":"<p>All executions have a same json format is</p> <pre><code>{\n    \"result\": { }, //Dynamic object\n    \"isSuccess\": \"true\",\n    \"error\": \"Some error codes\"\n}\n</code></pre> <p>However, you don't care too much about this result format because LET Portal will wrap it for you. If <code>isSuccess=true</code>, we will detach <code>result</code> object as <code>data</code></p>"},{"location":"deep-dive/mongodb/#query","title":"$query","text":"<p>First command type is <code>$query</code>, let's take a look some tabs below:</p> <p>``` json tab=\"Pattern\" {     \"$query\":{         \"collection_name\": [             // Aggregation Pipeline         ]     } } <pre><code>``` json tab=\"Example\"\n{\n    \"$query\": {\n        \"apps\": [\n            {\n                \"$match\": {\n                    \"_id\": \"ObjectId('{{data.id}}')\"\n                }\n            }\n        ]\n    }\n}\n</code></pre></p> <p>``` bson tab=\"Translated\" {     \"query\": {         \"apps\": [             {                 \"match\": {                     \"_id\": ObjectId('{{data.id}}')                 }             }         ]     } } <pre><code>As you see, an array of `collection_name` is Aggregation Pipeline of MongoDB. LET Portal will detach this array to execute as Aggregation Pipeline.\n\n## $union\n\nIf you have an experience with MongoDB, Aggregation Pipeline doesn't have Union feature yet. So that's why we create this keyword to make your better life.\n\n``` json tab=\"Pattern\"\n{\n    \"$query\": {\n        \"$union\": [\n            {\n                \"collection_name1\": []\n            },\n            {\n                \"collection_name1\": []\n            }\n        ]\n    }\n}\n</code></pre></p> <p>Basically, <code>$union</code> helps you to merge two same results into one.</p>"},{"location":"deep-dive/mongodb/#insert","title":"$insert","text":"<p>``` json tab=\"Pattern\" {     \"insert\":{         \"collection_name\": {             \"data\": {                 // Json for inserting Bson document             },             // Some static fields, useful for non-control field such as createdDate         }     } } <pre><code>``` json tab=\"Example\"\n{\n    \"$insert\": {\n        \"apps\": {\n            \"$data\": \"{{data}}\",\n            \"author\": \"{{user.username}}\",\n            \"createdDate\": \"ISODate('{{currentISODate()}}')\",\n            \"updatedDate\": \"ISODate('{{currentISODate()}}')\"\n        }\n    }\n}\n</code></pre></p> <p>``` bson tab=\"Translated\" {     \"insert\": {         \"apps\": {             \"data\": {                 \"_id\": \"ObjectId('abc')\",                 \"name\": \"Core\"             },             \"author\": \"admin\",             \"createdDate\": \"ISODate('2020-02-02 00:00')\",             \"updatedDate\": \"ISODate('2020-02-02 00:00')\"         }     } } <pre><code>## $update\n\n``` json tab=\"Pattern\"\n{\n    \"$update\":{\n        \"collection_name\": {\n            \"$data\": {\n                // Json for updating Bson document\n            },\n            // Some static field, useful for non-control field such as modifiedDate\n            \"$where\": {\n                // Condition for finding updating document\n            }\n        }\n    }\n}\n</code></pre></p> <p>``` json tab=\"Example\" {   \"update\": {     \"apps\": {       \"data\": \"{{data}}\",       \"updatedDate\": \"ISODate('{{currentISODate()}}')\",       \"$where\": {         \"_id\": \"ObjectId('{{data.id}}')\"       }     }   } } <pre><code>``` bson tab=\"Translated\"\n{\n    \"$update\": {\n        \"apps\": {\n            \"$data\": {\n                \"_id\": \"ObjectId('abc')\",\n                \"name\": \"Core\"\n            },\n            \"updatedDate\": \"ISODate('2020-02-02 00:00')\",\n            \"$where\": {\n                \"_id\": \"ObjectId('abc')\"\n            }\n        }\n    }\n}\n</code></pre></p>"},{"location":"deep-dive/mongodb/#delete","title":"$delete","text":"<p>``` json tab=\"Pattern\" {   \"delete\":{     \"collection_name\": {       \"where\": {         // Condition for finding deleting documents       }     }   } } <pre><code>``` json tab=\"Example\"\n{\n  \"$delete\":{\n    \"apps\": {\n      \"$where\": {\n        \"_id\": \"ObjectId('{{data.id}}')\"\n      }\n    }\n  }\n}\n</code></pre></p> <p><code>bson tab=\"Translated\" {   \"$delete\":{     \"apps\": {       \"$where\": {         \"_id\": \"ObjectId('abc')\"       }     }   } }</code></p>"},{"location":"deep-dive/multiple-execution-steps/","title":"Deep Dive - Multiple Executions","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"deep-dive/multiple-execution-steps/#what-is-multiple-executions","title":"What is Multiple Executions?","text":"<p>When you configure one button on Dynamic List or Page, you will see <code>Multiple Executions</code>. It allows you to control a group of many steps on proceeding Database-side.</p> <p>For example: You want to execute two commands such as <code>Query</code> then <code>Insert</code> on Database in one button. So <code>Multiple Executions</code> will help you this case.</p> <p></p>"},{"location":"deep-dive/multiple-execution-steps/#multiple-execution-context","title":"Multiple Execution Context","text":"<p>Let take a look on this sequence flow below to help you understand a mechanism of Multiple Execution Context.</p> <p></p> <p>As the flow, when you run one Multiple Executions, a system will generate a context with data pattern</p> <pre><code>{\n    \"step1\": { },\n    \"step2\": { }\n    // Step x: { }\n}\n</code></pre> <p>Then when you want to get a data of previous step, you just use <code>{{$step1}}</code> to access. </p>"},{"location":"deep-dive/multiple-execution-steps/#cross-database","title":"Cross-Database","text":"<p>With this context, you can run cross-databases such as MongoDB, SQL Server, MySQL and PostgreSQL. LET Portal will handle a context for making sure to provide an approriate data.</p> <p>However, you need to know which exact data can be stored per each command type</p> Command Type Stored Data Example Query returned data from query <code>{ \"id\": \"abc\"}</code> Insert Number of inserted rows 10 Update Number of updated rows 10 Delete Number of deleted rows 10"},{"location":"deep-dive/multiple-execution-steps/#auto-increment-column","title":"Auto-Increment Column","text":"<p>Most of SQL databases are providing an auto-increment column for primary key. So you want to get this in returned data of <code>Insert</code> command. Fortunately, SQL allows you to run multiple commands on one run. So there are some examples for taking auto-increment column</p> <p>``` sql tab=\"SQL Server\" INSERT INTO Users(username, password) VALUES (N'admin', N'abc'); SELECT SCOPE_IDENTITY() <pre><code>``` sql tab=\"MySQL\"\nINSERT INTO Users(username, password) VALUES (N'admin', N'abc');\nSELECT LAST_INSERT_ID();\n</code></pre></p> <p><code>sql tab=\"PostgreSQL\" INSERT INTO Users(id,username, password) VALUES (Default,N'admin', N'abc'); RETURNING id;</code></p> <p>Ensure you break these commands by <code>;</code></p>"},{"location":"deep-dive/page/","title":"Deep Dive - Page","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"deep-dive/page/#preparation-knowledge","title":"Preparation knowledge","text":"<p>Before you read, please ensure you must complete this step and concepts. This step will help you to a basic knowledge about Page.</p> <p>Warning</p> <p>We assume you have an experience to work with LET Portal, at least login/menu and how to redirect. We just provide some short steps for letting you know the main points</p>"},{"location":"deep-dive/page/#page-info","title":"Page Info","text":"<p>Ignore some common fields, we just focus on two things: Options and Claims</p>"},{"location":"deep-dive/page/#options","title":"Options","text":"<p>By default, we don't have any option. You need to add key/value for one option. An ideal of option is a feature toogle. So let's discuss about use-cases of Options. For example: you get one requirement for hiding some controls until we have another product will be released. So you just add one key/value is \"waitNewProduct\"/\"true\"</p> <p>Then on \"hidden\" option of control, you just type an expression <code>options.waitNewProduct</code> </p> <p>Expression</p> <p>Please note you can access Page Options via <code>options</code> on expression field</p>"},{"location":"deep-dive/page/#claims","title":"Claims","text":"<p>Claim, same as many systems, is a property of one identity. Claims-based authorization is very popular nowaday, it is helping many enterprise systems to deal with Security Model. However, LET Portal is building for small company which has a few people. In this situation, we choose a typical authorization model is Role-based Authorization.</p> <p>TL;DR: Role-based authorization is an authorization mechanism which defines a relationship between user (identity), role and claims (or permissions on some old systems). User can has multiple roles. Role has multiple claims and each claim contains <code>ClaimValue</code> and <code>ClaimType</code>.</p> <p>On LET Portal, Claims on Page are a group of <code>Boolean</code> claims. They indicate some claims which a role MUST contain (with value is <code>true/false</code>)</p> <p>By default, each page always has one claim is <code>allowaccess</code> which indicates this role can access this page. All adding claims are custom. For example: we add one claim as <code>allowsubmit</code></p> <p></p> <p>Now all roles has <code>false</code> value when role accesses this page via url. If you want to set <code>true</code> value, you go to Role Claims page via Roles Management page.</p> <p></p> <p>Then you want to apply this, you just type <code>claims.allowsubmit</code> on any expression field.</p> <p></p> <p>Expression</p> <p>Please note you can access Page Claims via <code>claims</code> on expression field</p>"},{"location":"deep-dive/page/#buttons","title":"Buttons","text":"<p>Same as Dynamic List button, but we still highlight some important parts.</p>"},{"location":"deep-dive/page/#button-info","title":"Button Info","text":"<ul> <li>Hidden**: You can enter an expression on this field. If it is empty, means it is <code>false</code></li> <li>Required Validation: If it is enable, all sections must be valid before proceeding</li> </ul>"},{"location":"deep-dive/page/#button-options","title":"Button Options","text":"<ul> <li>Confirmation Options: It will pop-up a dialog Yes/No, if you choose <code>Yes</code>, an action will be triggered</li> <li>Action Options: Two types are Execute Database and Http Service, same with Dynamic List</li> <li>Notification Info: Toast message for notifying user about an execution result</li> </ul>"},{"location":"deep-dive/page/#button-routes","title":"Button Routes","text":"<p>Different with Dynamic List's button, each button has many routes. So why do we want to have many routes? Let's take a look on this scenarios: Imagine you stay on QuickQuote page, you can choose <code>User paid via Visa</code> or <code>User paid via Paypal</code> on Payment type. So there are two cases and you need to redirect a correct page according a chosen.</p> <ul> <li>Route (1): if <code>data.paymentType === 0</code>, then redirect to <code>portal/page/payment-visa</code></li> <li>Route (2): if <code>data.paymentType === 1</code>, then redirect to <code>portal/page/payment-paypal</code></li> </ul> <p>Now you are clearly a reason why one button can have multiple routes. You should put your condition on Condition field. </p> <p>Redirect button</p> <p>You can ask why you don't see any option for Redirect Action Type on Action Options. So you  just disable Action Options and this button will work as Redirect button</p>"},{"location":"deep-dive/page/#attach-to-section","title":"Attach to Section","text":"<p>Appliest to:  v0.6.0 and later</p> <p>What happened if you have two different sections in one Page? So you want to have two buttons which stay on correlate section. Easiest way is you just choose <code>Place Section</code> on button to attach it to section.</p> <p></p> <p>And the result will look like below</p> <p></p> <p>Seperation of validation</p> <p>When you assign button to specific section, that means <code>Required Validation</code> option only apply to section's scope instead of whole page.</p>"},{"location":"deep-dive/page/#datasources","title":"Datasources","text":"<p>You can define many datasources as you want. But you can control which datasource can be pulled by <code>Trigger Condition</code>. For example: you want to pull <code>data</code> as <code>Static Datasource</code> when <code>queryparams.name=static</code> and <code>data</code> as <code>Query Database</code> when <code>queryparams.name=null</code></p> <p>Performance</p> <p>LET Portal allows you to make many datasources as you want. However, we are running on client-side so we recommend you to have at most three datasources. Also you need to check Trigger Condition to prevent some unexpected cases. If you aren't sure this datasource is acceptable, you can deactive this.</p> <p>See more on State Management</p>"},{"location":"deep-dive/page/#events-linking-section-events","title":"Events - Linking Section Events","text":"<p>There are nothing is different of Chaining Events mechanism. On page level you can define a trigger control from one section to another section. But there are many important notes on the current version below:</p> <ul> <li>We can't perform <code>action event type</code> to change a control value of another section. <code>Action event type</code> is working only within one section</li> <li>We can trigger <code>refetch</code> action on Dynamic List through another event on Standard</li> <li>Chart still doesn't have any <code>action event</code></li> </ul>"},{"location":"deep-dive/sql/","title":"Deep Dive - Working with SQL","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"deep-dive/sql/#preparation-knowledge","title":"Preparation knowledge","text":"<p>We recommend you to read carefully some sections below before you read more steps on this document:</p> <ul> <li>Page concept link</li> <li>State Management link</li> <li>Global variables link</li> </ul>"},{"location":"deep-dive/sql/#sql","title":"SQL","text":"<p>SQL is very popular and easy to learn. However, we point out that is very difficult to add some customs on one SQL command such as <code>SELECT</code> or <code>INSERT</code>. Unlike MongoDB, SQL is flexible when compiling a lot of chaining <code>SELECT</code> (aka sub query). Therefore, we decide to separate some customs based on use-cases.</p>"},{"location":"deep-dive/sql/#interpolation","title":"Interpolation {{}}","text":"<p>Same as MongoDB, we use <code>{{data.id}}</code> to translate a value. However, SQL Injection is very easy to cheat so that we always apply <code>SQLParameter</code> instead of concat string. </p> <p>One important thing that you need to add <code>|{type}</code> in your interpolation for indicating with database type should be bound. There are some primary types of each database:</p> Declaration C# type MySQL PostgreSQL SQL Server <code>{{data.id}}</code> string LongText Text NVarChar <code>{{data.date|date}}</code> DateTime Datetime Date DateTime <code>{{data.allow|bool}}</code> bool Bit Boolean Bit <code>{{data.counter|int}}</code> int Int32 Integer Int <code>{{data.tick|long}}</code> long Int64 Bigint BigInt <code>{{data.timestamp|timespan}}</code> Timespan Int64 Bigint BigInt <code>{{data.money|float}}</code> float Float Double Float <code>{{data.money|double}}</code> double Double Double Float <code>{{data.money|decimal}}</code> decimal Decimal Money Decimal <p>Also, it is applied for Built-in methods.</p>"},{"location":"deep-dive/sql/#sql-dynamic-list","title":"SQL - Dynamic List","text":"<p>``` sql tab=\"Simplest Query\" SELECT * FROM table_name <pre><code>By default, you don't want to add some custom words as **Simplest Query** above because Dynamic List will combine automatically Filters and Pagination. However, in case you want to have a complexity query such as `UNION` or multiple `SELECT`, LET Portal provides some custom words to do flexible.\n\nOn Dynamic List, we use this common `SELECT` with some customs keywords below:\n\n``` sql tab=\"Full custom words\"\nSELECT * FROM \"table_name\" WHERE \"your_condition\" \n    AND {{SEARCH}} AND {{FILTER}} \n    ORDER BY {{ORDER}} \n    LIMIT {{PAGENUM}} \n    OFFSET {{PAGESTART}}\n</code></pre></p> <p>Interpolation {{ }}</p> <p>Please remember that you want to bind some data into SQL, you should use <code>{{ }}</code>, also apply for some custom words above</p> <p>Now back to our customs words for Dynamic List, we will discuss one by one for letting you know what exactly data will be replaced by custom word</p> <p>Multiple words</p> <p>You can put many custom words whenever you want. However, you ensure to put correct place.</p>"},{"location":"deep-dive/sql/#search","title":"{{SEARCH}}","text":"<p>This word will generate a condition of searching keyword on Dynamic List. For example: you want to find an username on <code>users</code> table, so you enter a keyword <code>admin</code> on Dynamic List.</p> <p>Default</p> <p>Default tab means this is a query you need to input on Dynamic List Builder page.</p> <p>``` sql tab=\"Default\" SELECT id, username FROM users WHERE {{SEARCH}} <pre><code>``` sql tab=\"Translated\"\nSELECT id, username FROM users WHERE username LIKE '%@keyword%'\n/* In this, @keyword = 'admin'*/\n</code></pre></p>"},{"location":"deep-dive/sql/#filter","title":"{{FILTER}}","text":"<p>This word will generate a combination of Advanced Filter on Dynamic List. For example: you want to find any user has <code>username</code> contains <code>admin</code> and <code>createdDate</code> must be greater than <code>2020-02-02</code></p> <p>``` sql tab=\"Default\" SELECT id, username, createdDate FROM users WHERE {{FILTER}} <pre><code>``` sql tab=\"Translated\"\nSELECT id, username, createdDate FROM users WHERE username LIKE '%@filter1%' AND createdDate &gt;= @filter2\n\n/* In this, @filter1 = 'admin' and @filter2 = '2020-02-02' */\n</code></pre></p>"},{"location":"deep-dive/sql/#order","title":"{{ORDER}}","text":"<p>This word will generate a sorting string on Dynamic List. For example: you want to sort <code>username</code> ascending on Dynamic List.</p> <p>``` sql tab=\"Default\" SELECT id, username FROM users ORDER BY {{ORDER}}  <pre><code>``` sql tab=\"Translated\"\nSELECT id, username FROM users ORDER BY username ASC\n</code></pre></p>"},{"location":"deep-dive/sql/#pagenum-and-pagestart","title":"{{PAGENUM}} and {{PAGESTART}}","text":"<p>Two words will replace two numbers <code>number per page</code> and <code>skip rows number</code>. For example: you want to take top 10 rows on page 2 on Dynamic List.</p> <p>``` sql tab=\"Default\" SELECT id, username FROM users LIMIT {{PAGENUM}} OFFSET {{PAGESTART}} <pre><code>``` sql tab=\"Translated\"\nSELECT id, username FROM users LIMIT 10 OFFSET 10\n/* OFFSET 10 is skipping first 10 rows on result*/\n</code></pre></p> <p>Due to different pagination implementation of each database, we just provide two words for helping you to add a correct syntax. There are pagination implementation of three databases:</p> <p>``` sql tab=\"SQL Server\" SELECT id, username FROM users  OFFSET {{PAGESTART}} ROWS FETCH NEXT {{PAGENUM}} ROWS ONLY <pre><code>``` sql tab=\"MySQL\"\nSELECT id, username FROM users LIMIT {{PAGENUM}} OFFSET {{PAGESTART}}\n</code></pre></p> <p>``` sql tab=\"PostgreSQL\" SELECT id, username FROM users LIMIT {{PAGENUM}} OFFSET {{PAGESTART}} <pre><code># SQL - Action Button\n\nFor using SQL on Action Button (both Standard, Dynamic List and Page), you can run `SQL` for CRUD data\n\n``` sql tab=\"Query\"\nSELECT * FROM users\n</code></pre></p> <p>``` sql tab=\"Insert\" INSERT INTO users(username,password) VALUES (\"{{data.username}}\", \"{{data.password}}\") <pre><code>``` sql tab=\"Update\"\nUPDATE users SET username = \"{{data.username}}\" WHERE id = \"{{data.id}}\"\n</code></pre></p> <p>``` sql tab=\"Delete\" DELETE FROM users WHERE id = \"{{data.id}}\" <pre><code>LET Portal still support [multiple execution steps](multiple-execution-steps.md), so you can read to get more details.\n\n# SQL - Chart\n\nUnlike SQL - Dynamic List, Chart is supporting two words are `{{FILTER}}` and `{{REAL_TIME}}`.\n\n!!! warning \"Real-time chart\"\n    Unlike MongoDB, `{{REAL_TIME}}` is a mandatory word for real-time chart\n\n## {{FILTER}}\n\nLike as SQL - Dynamic List, this word is used to generate a combination of chart filters. \n\nFor example: you want to find a report has `reportedDate` around `NOW` and `NOW - 30 days`\n\n``` sql tab=\"Default\"\nSELECT id, reportedDate FROM reports WHERE {{FILTER}}\n</code></pre></p> <p>``` sql tab=\"Translated\" SELECT id, reportedDate FROM reports  WHERE reportedDate &gt;= @filter1 &amp;&amp; reportedDate &lt; @filter2</p> <p>/* In this, @filter1 = 'NOW - 30days' and @filter2 = 'NOW' */ <pre><code>## {{REAL_TIME}}\n\nThis is a mandatory keyword when you set up a real-time Chart. You need to ensure `comparerealtimefield` is a date column.\n\nFor example: you want to compare `reportedDate` between `\n\n``` sql tab=\"Default\"\nSELECT id, reportedDate FROM reports WHERE {{REAL_TIME}}\n</code></pre></p> <p><code>sql tab=\"Translated\" SELECT id, reportedDate FROM reports  WHERE reportedDate &gt;= '2020-02-02 00:00:00' AND reportedDate &lt; '2020-02-02 00:00:30'</code></p> <p>For a reason why a duration is 30 seconds, let check it</p>"},{"location":"deep-dive/standard-array/","title":"Deep Dive - Standard Array","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"deep-dive/standard-array/#preparation-knowledge","title":"Preparation knowledge","text":"<p>We prefer to read all documents below before you read through this section. </p> <ul> <li>State Management</li> <li>Chaining Events</li> <li>Standard Component</li> </ul>"},{"location":"deep-dive/standard-array/#standard-array-options","title":"Standard Array Options","text":"<p>Standard Array is using the same builder page with Standard Component. So that you go to Standard Builder page for starting Standard Array.</p> <p>First and foremost, you need to turn on a slide <code>Standard Array</code> as a screenshot below on Standard Builder Page</p> <p></p> <p>There are four options for Standard Array</p> Option Name Value type Default value Description identityfield string? id It is a name of control which used to indicate a unique data on array namesfield string? name It contains multiple name of controls, separate by <code>;</code>. It indicates which controls will be used to appear on array. Ex: name;email allowadjustment boolean false If true, user can perform add/edit/remove any data on array allowupdateparts boolean false See here"},{"location":"deep-dive/standard-array/#intergration-on-page","title":"Intergration on Page","text":"<p>Same as any Section type, Standard Array can be added via Page Builder page. However, there are some limitations with Standard Array:</p> <ul> <li>Don't support page events, that means you can't configure linking section events</li> <li>Only support array type of datasource</li> </ul> <p>After you add Standard array, a page will look like</p> <p></p> <p>We will highlight some important notes on Page when you add Standard Array</p>"},{"location":"deep-dive/standard-array/#dialog-for-addupdate","title":"Dialog for Add/Update","text":"<p>We keep the same mechanism of Standard Component, that means a rendered dialog will be rendered a Standard Component and all controls can active chaining event. However, they can't active link section event on Page. By default, we don't let user touch on Standard Array, you need to change <code>allowadjustment</code> to <code>true</code></p> <p>Note</p> <p>We don't define a feature which is turn on/off <code>Add</code>, <code>Update</code>, <code>Remove</code> separately.</p> <p></p>"},{"location":"deep-dive/standard-array/#remove-children-then-add-new","title":"Remove children then add new","text":"<p>A first way you come to structure your data with tightly relationship between parent and chilren. It is a formal way nowaday for circumstances, it reduces many constraints between chilren and their external references. If you have a plan to go with this design, you need to change<code>allowupdateparts</code> to <code>false</code>.</p> <p>In this setup, we will create a <code>data</code> with structure below</p> <p>```json tab=\"Initial data\" {     \"data\": {         \"standard_array_name\": {             \"inserts\": [                 {                     // Array data                 }             ],             \"removes\": [                 {                     // Array data                 }             ]         }     } } <pre><code>```json tab=\"Example\"\n{\n    \"data\": {\n        \"claims\": {\n            \"inserts\":[\n                {\n                    \"claimType\": \"apps\",\n                    \"claimValue\": \"core-app\"\n                }\n            ],\n            \"removes\": [\n                {\n                    \"claimType\": \"apps\",\n                    \"claimValue\": \"core-app\"\n                }\n            ]\n        }\n    }\n}\n</code></pre></p> <p>Each time user performs any action such as add, update or remove any child, LET Portal will help you to maintain these groups <code>inserts</code> and <code>removes</code>. Your mission is only set up two database commands are INSERT and REMOVE.</p> <p>For example: you want to perform REMOVE first and then INSERT second on SQL Server.</p> <p>```sql tab=\"DELETE command\" DELETE FROM claims WHERE ClaimType=\"{{data.claimType}}\" <pre><code>```sql tab=\"INSERT command\"\nINSERT INTO claims(\"ClaimType\",\"ClaimValue\") Values (\"{{data.claimType}}\", \"{{data.claimValue}}\")\n</code></pre></p> <p>Let's take a look on <code>Execution Database</code>, we have a new field called <code>Data Loop Key</code>. It helps to indicate with <code>data</code> must be loop.</p> <p></p> <p>Note</p> <p>Once again, <code>data</code> keyword is used to indicate one child data on array of <code>Data Loop Key</code>. So keep in mind, <code>data</code> is just a keyword for referencing a bound data</p>"},{"location":"deep-dive/standard-array/#update-parts-instead-of-removing-all","title":"Update parts instead of removing all","text":"<p>A second way you come to structure data on parent-children relationship. It isn't formal and tend to fade nowaday. However, it is still working on many systems that require tight constraints between children data and their external references. So that it is hard to remove all and then add, only update with flag <code>isDeleted</code> to be <code>true</code> on table. If you have a plan to go with this design, you need to change <code>allowupdateparts</code> to <code>true</code>.</p> <p>In this setup, we will create a <code>data</code> with structure below</p> <p>```json tab=\"Initial data\" {     \"data\": {         \"standard_array_name\": {             \"fresh\": [                 // Array data from datasource             ],             \"inserts\":[                 // Empty on initial             ],             \"updates\": [                 // Empty on initial             ],             \"removes\": [                 // Empty on initial             ]         }     } } <pre><code>```json tab=\"Example\"\n{\n    \"data\": {\n        \"claims\": {\n            \"fresh\": [\n                {\n                    \"claimType\": \"apps\",\n                    \"claimValue\": \"core-app\"\n                }\n            ],\n            \"inserts\":[\n            ],\n            \"updates\": [\n            ],\n            \"removes\": [\n            ]\n        }\n    }\n}\n</code></pre></p> <p>Each time user performs any action such as add, update or remove any child, LET Portal will help you to move one item on <code>fresh</code> array to correct group <code>inserts</code>, <code>updates</code> or <code>removes</code>. At the end of this state, when user submits, you will have three groups for creating three commands: INSERT, UPDATE and REMOVE. All remaining items on <code>fresh</code> group are untouched.</p> <p>For example on SQL Server.</p> <p>```sql tab=\"DELETE command\" DELETE FROM claims WHERE ClaimType=\"{{data.claimType}}\" <pre><code>```sql tab=\"INSERT command\"\nINSERT INTO claims(\"ClaimType\",\"ClaimValue\") Values (\"{{data.claimType}}\", \"{{data.claimValue}}\")\n</code></pre></p> <p>```sql tab=\"UPDATE command\" UPDATE claims SET ClaimValue = \"{{data.claimValue}}\" WHERE ClaimType = \"{{data.claimType}}\" <pre><code>Same with the first way, you need to fill `Data Loop Key` on Execution Database.\n\n## Access Parent data\n\nYou can access parent data by `parent` keyword. For example:\n\n```json tab=\"Data\"\n{\n    \"data\": {\n        \"roleId\": \"abc\",\n        \"claims\": {\n            \"inserts\": [\n                {\n                    \"claimType\":\"apps\",\n                    \"claimValue\":\"core-app\"\n                }\n            ]\n        }\n    }\n}\n</code></pre></p> <p><code>sql tab=\"Database command\" INSERT INTO claims (claimType,claimValue,roleId)  Values(\"{{data.claimType}}\", \"{{data.claimValue}}\", \"{{parent.roleId}}\")</code></p>"},{"location":"deep-dive/standard-array/#limitations","title":"Limitations","text":"<p>Due to a complexity business, LET Portal still has some limitations for Standard Array:</p> <ul> <li>Don't support evaluted condition on Route of button</li> <li>Don't support setup condition on each step of Execution Database. For example: If <code>inserts</code> is empty, you want to perform <code>updates</code> instead</li> <li>Don't support link section events</li> </ul>"},{"location":"deep-dive/standard/","title":"Deep Dive - Standard","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"deep-dive/standard/#preparation-knowledge","title":"Preparation knowledge","text":"<p>Before you read, please ensure you must complete this step. This step will help you to a basic knowledge about Standard Component.</p> <p>Warning</p> <p>We assume you have an experience to work with LET Portal, at least login/menu and how to redirect. We just provide some short steps for letting you know a main points</p>"},{"location":"deep-dive/standard/#controls-population","title":"Controls Population","text":"<p>This section is helping you to create quickly these controls by querying your target database. LET Portal will detect based on your query's result to generate some controls. </p> <p>However, based on your database type, a query is depent on. For example: MongoDB need to use json, and SQL-based need to use SQL. </p> <p>At reference, you can take a look on MongoDB Expression and SQL Expression</p>"},{"location":"deep-dive/standard/#controls","title":"Controls","text":""},{"location":"deep-dive/standard/#control-info","title":"Control Info","text":"<ul> <li>Control Name: This field indicates an unique control to distinguish another controls in the same Standard. However, it isn't an unique name on a Page. For helping a distinction, we use a pattern name {Section Name}_{Control Name}</li> <li>Control Type: According to control type, it will have a different control options and validator groups. Check the table below</li> </ul> <p>Info</p> <p>Same prefers to a first row</p> Control Type Options List Validators Textbox label, placeholder, disabled, hidden, bindname Required, Min Length, Max Length, Regex, Email, Equal To Label Same NULL Line Breaker NULL NULL Textarea Same Same Number Same Required, Number, Number Range DatePicker Same Max Date, Min Date, Equal, Equal To Checkbox Same Required Slide Same Required Radio Same Radio Rich Text Editor Same Required Icon Picker Same Required Markdown Editor Same Required Select Same, multiple Required Auto Complete Same, multiple Required Uploader Same, allowfileurl, saveonchange Required, File Maximum Size, File Extensions Multi Uploader Same, allowfileurl, saveonchange Required, File Maximum Size, File Extensions"},{"location":"deep-dive/standard/#control-options","title":"Control Options","text":"<p>Control options are used to configure some properties of control. They are defined by Key-Value instead of a group of controls. However, we also have a hint to help you to fill a correct value. These important options are below (another options are quite easy to understand):</p> Option Name Hint Default Value Warn bindname Use for mapping data in or out Same as control name See concept disabled An Evaluted Expression string, it allows user to change a value NULL See expression hidden An Evaluted Expression string, it allows user to change a value NULL See expression multiple Only for Select and Auto-Complete, allow user can select multiple values false allowfilreurl Only for Uploader and Multi Uploader, allow set downloadable url instead of file id false saveonchange Only for Uploader and Multi Uploader, allow upload a file manually false This mode is still developing"},{"location":"deep-dive/standard/#selection-controls","title":"Selection Controls","text":"<p>We have three selection controls which want to have a datasource. They are <code>Radio</code>, <code>Select</code> and <code>AutoComplete</code>.</p> <p>A datasource can be <code>Static</code>, <code>Database</code> or <code>Web Service</code>. However, we need to ensure a json data should be an array with child element contains two properties <code>name</code> and <code>value</code>:</p> <pre><code>[\n  {\n    \"name\": \"MongoDB\",\n    \"value\": \"mongodb\"\n  }\n]\n</code></pre> <p>Limitation</p> <p>We are still developing <code>Web Service</code> datasource and <code>OutputProjection</code> for this feature. So you can use <code>$project</code> on MongoDB or <code>SELECT as</code> on SQL for projecing <code>name</code> and <code>value</code></p>"},{"location":"deep-dive/standard/#validation-options","title":"Validation Options","text":"<p>These options are helping to check a valid state of control's value and showing an error message. There are nothing special on these options. A minor note is you can display a option (the most side textbox on a row) value by using {{option}} on error message field.</p> <p></p>"},{"location":"deep-dive/standard/#async-validators","title":"Async Validators","text":"<p>A most difficult understanding of control is async validator. Async Validator is a technique which helps a value to be validated before sending to server-side on submitting step. It doesn't block an user's behavior on website and quickly help user to find out a valid value.</p> <p>There are two types of async validator:</p> <ul> <li>Database validator: you need to query a database for ensuring no found data. We recommend this way for small query and this database is yours.</li> <li>HTTP validator: you need to perform an ajax call for checking with another web service. We recommend this way for complicated case.</li> </ul> <p>For example, you can edit App Form Standard and click on \"Edit Async Validators\" button on name control to show.</p> <p></p> <p></p> <p>For these configurations, they are the same with these setups that we have done. Only one field we need to highlight, it is Evaluated Expression. This field is using to evaluate a response of Database Validator or HTTP Validator. It is valid when expression is true, otherwise is false</p> <p>This field is using only response var to access a result of Database Validator or HTTP validator. For example with App Form, a string \"response.result == null\" is true if there is no app name is existed on database.</p> <p>Note</p> <p>response.result is a default result's model when you execute query on Database. A model is below</p> <pre><code>{\n    result: any,\n    isSuccess: boolean,\n    error: string\n}\n</code></pre>"},{"location":"deep-dive/standard/#control-events","title":"Control Events","text":"<p>Control events are the built-in event on LET Portal. These events can't be added or removed. Also they can configure the chaining events such as triggering change, reset default value of another control.</p> <p>There are three action types of control's event:</p> <ul> <li>Trigger Events: Allow to trigger multiple events on the same section</li> <li>Query Database: Allow to query on database to fill values</li> <li>Web Service: Allow to call HTTP web service</li> </ul> <p></p> <p>For more detail about Chaining Events, read here</p>"},{"location":"deployment/deploy-spa-web/","title":"Deployment - SPA Web","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"deployment/deploy-spa-web/#use-angular-cli","title":"Use Angular CLI","text":"<p>By default, you can use Angular CLI to build a static website by this command</p> <pre><code>ng build --prod --deleteOutputPath=true\n</code></pre> <p>If you want to apply another environment, use this command</p> <pre><code>ng build --configuration={your_env} --deleteOutputPath=true\n</code></pre> <p>After you run this command successfully, you can check a <code>dist</code> folder which locates same as <code>package.json</code> file.</p> <p></p> <p>Now you can copy whole <code>web-portal</code> folder to your deployment (such as <code>wwwroot</code> on nginx)</p>"},{"location":"deployment/deploy-spa-web/#use-npm","title":"Use npm","text":"<p>We also prepare some shortcut commands that help you to type quickly</p> <p>``` JavaScript tab=\"debug\" npm run debug <pre><code>``` JavaScript tab=\"docker debug\"\n// Supports for deploying server-side on docker\nnpm run docker-debug\n</code></pre></p> <p>``` JavaScript tab=\"local debug\" // Supports for deploying server-side on same PC npm run local-debug <pre><code>``` JavaScript tab=\"prod\"\nnpm run prod\n</code></pre></p>"},{"location":"deployment/deploy-spa-web/#nginx-config","title":"Nginx Config","text":"<p>By normal way, you want to serve Angular SPA static files. Thus you can copy this simple config to <code>nginx.conf</code></p> <pre><code>server {\n    listen 80;\n\n    server_name _;\n    root /var/www/letportal\n    location / {\n        try_files $uri $uri/ /index.html;\n    }\n}\n</code></pre>"},{"location":"deployment/docker/","title":"Deployment - Docker","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"deployment/docker/#deployment-model","title":"Deployment Model","text":"<p>Docker is very popular nowaday, it helps us to create container to ship everywhere. So we strongly recommend you to learn about Docker and Kubernetes and deploy all services on Docker.</p> <p>In this docs, we only brief How to deploy on Docker on single VM. For deployment on Kubernetes or Docker Swarm, it is out-of-the-box.</p> <p>Some domain names are below:</p> <ul> <li>Identity APIs: <code>lp.identityapi</code></li> <li>Portal APIs: <code>lp.portalapi</code></li> <li>Service Management APIs: <code>lp.servicemangement</code></li> <li>Gateway: <code>lp.gateway</code></li> <li>Chat APIs: <code>lp.chatapi</code></li> <li>MongoDB: <code>mongodb</code></li> </ul> <p>SPA Web and MongoDB</p> <p>SPA Web is static web that will be served by Nginx, so that you just deploy same as this article.  For MongoDB, if you don't want to host on Docker Container, you can remove it and change some DatabaseOptions on each service</p>"},{"location":"deployment/docker/#configuration-changes","title":"Configuration changes","text":""},{"location":"deployment/docker/#spa-web","title":"SPA Web","text":"<p>Publish Command: <code>npm run docker</code></p> <p>Location: <code>src\\web-portal\\src\\environments\\environment.docker.ts</code></p> <p>Changes:</p> <pre><code>export const environment = {\n  production: true,\n  version: \"0.0.5\",\n  configurationEndpoint: \"http://{Your_public_domain}:8080/v1.0/api/configurations/Portal/v1.0\",\n  ignoreSendTokenEndpoints: \"api/accounts/login;api/accounts/refresh;api/accounts/forgot-password;api/accounts/recovery-password\",\n  chatOptions: {\n    allowFileTypes: 'jpg;jpeg;gif;png;zip;rar;doc;docx;xls;xlsx;pdf',\n    maxFileSizeInMb: 16\n  }\n};\n</code></pre>"},{"location":"deployment/docker/#portal-configuration-file","title":"Portal Configuration file","text":"<p>Location: <code>src\\web-apis\\LetPortal.ServiceManagementApis\\Files\\Portal\\v1.0\\appsettings.Docker.json</code></p> <p>Changes:</p> <pre><code>{\n  \"portalBaseEndpoint\": \"http://{Your public domain}:8080/v1.0\",\n  \"chatBaseEndpoint\": \"http://{Your public domain}:8082\",\n  \"identityBaseEndpoint\": \"http://{Your public domain}:8081\"\n}\n</code></pre>"},{"location":"deployment/docker/#portal-apis-configuration-file","title":"Portal APIs Configuration file","text":"<p>Location: <code>src\\web-apis\\LetPortal.WebApis\\appsettings.Docker.json</code></p> <p>Changes:</p> <pre><code>{\n    \"FileOptions\": {\n        \"DownloadableHost\": \"http://{Your_public_domain}:8080/v1.0/files\n    }\n}\n</code></pre>"},{"location":"deployment/docker/#gateway","title":"Gateway","text":"<p>Location: <code>src\\web-apis\\LetPortal.Gateway\\appsettings.Docker.json</code></p> <p>Changes:</p> <pre><code>{\n    \"GlobalConfiguration\": {\n        \"BaseUrl\": \"http://{Your_public_domain}:8080/\"\n    }\n}\n</code></pre>"},{"location":"deployment/docker/#run-docker-compose","title":"Run docker compose","text":"<p>By default, all services have <code>Dockerfile</code> which locates in project folder, you can open and edit if you want to upgrade .NET Core framework.</p> <p>Now a simplest command to bring all services up is</p> <p>``` bash tab=\"Production\" docker-compose up <pre><code>``` bash tab=\"Production Local\"\ndocker-compose -f docker-compose.local.yml up\n</code></pre></p> <p>Production Local</p> <p>As we said on Multiple Environments section, Production Local iss using for accessing from Host or intranet.</p> <p>Then you open a new tab and check</p> <pre><code>docker ps\n</code></pre> <p>The result must be</p> <pre><code>CONTAINER ID        IMAGE                       COMMAND                  CREATED              STATUS              PORTS                      NAMES\n68a82dd76eda        lp-identityapi:0.0.5        \"dotnet LetPortal.Id\u2026\"   About a minute ago   Up About a minute   0.0.0.0:5143-&gt;80/tcp       web-apis_lp.identityapi_1\n4be21f2b7bdc        lp-portalapi:0.0.5          \"dotnet LetPortal.Po\u2026\"   About a minute ago   Up About a minute   0.0.0.0:5144-&gt;80/tcp       web-apis_lp.portalapi_1\nc8f8754082b3        lp-gateway:0.0.5            \"dotnet LetPortal.Ga\u2026\"   About a minute ago   Up About a minute   0.0.0.0:5142-&gt;80/tcp       web-apis_lp.gateway_1\n14aff59977e2        lp-servicemangement:0.0.5   \"dotnet LetPortal.Se\u2026\"   About a minute ago   Up About a minute   0.0.0.0:5141-&gt;80/tcp       web-apis_lp.servicemangement_1\n33ea14e1d71f        mongo:latest                \"docker-entrypoint.s\u2026\"   About a minute ago   Up About a minute   0.0.0.0:27117-&gt;27017/tcp   web-apis_mongodb_1\n</code></pre>"},{"location":"deployment/docker/#how-to-expose-with-nginx","title":"How to expose with Nginx","text":"<p>After you run all services on Docker, you want to change a minor configuration on Nginx to help to expose Gateway and Identity to serve.</p> <p>If you don't change anything, there are IPs of services that you want to change on <code>nginx.conf</code>.</p> <ul> <li>Identity APIs: 5143</li> <li>Gateway APIs: 5142</li> </ul> <p>So <code>nginx.conf</code> must be</p> <pre><code>user www-data;\nworker_processes auto;\npid /run/nginx.pid;\ninclude /etc/nginx/modules-enabled/*.conf;\n\nevents {\n    worker_connections 768;\n    # multi_accept on;\n}\n\nhttp {\n\n    ##\n    # Basic Settings\n    ##\n\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout 65;\n    types_hash_max_size 2048;\n    # server_tokens off;\n\n    server_names_hash_bucket_size 64;\n    # server_name_in_redirect off;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    ##\n    # SSL Settings\n    ##\n\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE\n    ssl_prefer_server_ciphers on;\n\n    ##\n    # Logging Settings\n    ##\n\n    #access_log /var/log/nginx/access.log;\n    #error_log /var/log/nginx/error.log;\n\n    ##\n    # Gzip Settings\n    ##\n\n    gzip on;\n\n    # gzip_vary on;\n    # gzip_proxied any;\n    # gzip_comp_level 6;\n    # gzip_buffers 16 8k;\n    # gzip_http_version 1.1;\n    # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\n\n    ##\n    # Virtual Host Configs\n    ##\n\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n\n    server {\n        listen       8080;\n        server_name _;\n        access_log /etc/nginx/logs/api.access.log;\n        error_log  /etc/nginx/logs/api.error.log;\n        location / {\n            proxy_pass         http://localhost:5142;\n            #proxy_http_version 1.1;\n            #proxy_set_header   Upgrade $http_upgrade;\n            #proxy_set_header   Connection keep-alive;\n            #proxy_set_header   Host $host;\n            #proxy_cache_bypass $http_upgrade;\n            #proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n            #proxy_set_header   X-Forwarded-Proto $scheme;\n        }\n    }\n\n    server {\n        listen 8081;\n        server_name _;\n        #access_log /etc/nginx/logs/ids.access.log;\n        #error_log  /etc/nginx/logs/ids.error.log;\n        location / {\n            proxy_pass         http://localhost:5143;\n            #proxy_http_version 1.1;\n            #proxy_set_header   Upgrade $http_upgrade;\n            #proxy_set_header   Connection keep-alive;\n            #proxy_set_header   Host $host;\n            #proxy_cache_bypass $http_upgrade;\n            #proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n            #proxy_set_header   X-Forwarded-Proto $scheme;\n        }\n    }\n\n}\n</code></pre>"},{"location":"deployment/one-machine/","title":"Deployment - One VM","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"deployment/one-machine/#deployment-model","title":"Deployment Model","text":"<p>Now look back to LET Portal Architecture, we need to discuss more details before you can choose this Deployment Model.</p> <p>Technically, all components which stay inside DMZ should be deployed on one VM. So you need to install some softwares below:</p> <ul> <li>Nginx </li> <li>.NET Core SDK (prefer to build and run)</li> <li>MongoDB</li> <li>Any database which stores Portal and Identity Database</li> </ul> <p>Also we prefer to a directory structure of <code>letportal-pub</code> folder below:</p> <ul> <li><code>spa-web</code>: Copy all files of <code>dist\\web-portal</code> folder which you published by Angular CLI</li> <li><code>web-apis</code>:<ul> <li><code>LetPortal.IdentityApis</code>: publish Identity APIs into this folder</li> <li><code>LetPortal.PortalApis</code>: publish Portal APIs into this folder</li> <li><code>LetPortal.ServiceManagementApis</code>: publish Service Management APIs into this folder</li> <li><code>LetPortal.GatewayApis</code>: publish Gateway APIs into this folder</li> </ul> </li> </ul> <p>Grant permissions</p> <p>On Linux, you need to grant permission on these folders with command <code>sudo chmod -R 755 ~/.letportal-pub</code>.</p>"},{"location":"deployment/one-machine/#configuration-changes","title":"Configuration changes","text":""},{"location":"deployment/one-machine/#spa-web","title":"SPA Web","text":"<p>Publish command: <code>npm run prod</code></p> <p>Location: <code>src\\web-portal\\src\\environments\\environment.prod.ts</code></p> <p>Changes:</p> <pre><code>export const environment = {\n  production: true,\n  version: \"0.0.5\",\n  configurationEndpoint: \"http://{Your_public_domain}:8080/v1.0/api/configurations/Portal/v1.0\",\n  ignoreSendTokenEndpoints: \"api/accounts/login;api/accounts/refresh;api/accounts/forgot-password;api/accounts/recovery-password\"\n};\n</code></pre>"},{"location":"deployment/one-machine/#portal-configuration-file","title":"Portal Configuration file","text":"<p>Location: <code>src\\web-apis\\LetPortal.ServiceManagementApis\\Files\\Portal\\v1.0\\appsettings.Local.json</code></p> <p>Changes:</p> <pre><code>{\n  \"portalBaseEndpoint\": \"http://{Your public domain}:8080/v1.0\",\n  \"identityBaseEndpoint\": \"http://{Your public domain}:8081\"\n}\n</code></pre>"},{"location":"deployment/one-machine/#portal-apis-configuration-file","title":"Portal APIs Configuration file","text":"<p>Location: <code>src\\web-apis\\LetPortal.WebApis\\appsettings.Local.json</code></p> <p>Changes:</p> <pre><code>{\n    \"FileOptions\": {\n        \"DownloadableHost\": \"http://{Your_public_domain}:8080/v1.0/files\n    }\n}\n</code></pre>"},{"location":"deployment/one-machine/#gateway","title":"Gateway","text":"<p>Location: <code>src\\web-apis\\LetPortal.Gateway\\appsettings.Local.json</code></p> <p>Changes:</p> <pre><code>{\n    \"GlobalConfiguration\": {\n        \"BaseUrl\": \"http://{Your_public_domain}:8080/\"\n    }\n}\n</code></pre>"},{"location":"deployment/one-machine/#publish-spa-web","title":"Publish SPA Web","text":"<p>You need to read this for more details. For brief, just use these commands below</p> <p>Configuration Url</p> <p>You need to edit <code>configurationEndpoint</code> in <code>environment.prodlocal.ts</code> file. For example: if you have a plan to public this website with <code>letportal.abc.com</code> domain, you need to change it into this domain.</p> <p>``` powershell tab=\"Window\" cd src\\web-portal</p> <p>npm install</p> <p>npm run prodlocal</p> <p>Copy-Item -Path .\\dist\\web-portal* -Destination D:.letportal-pub\\spa-web -Recurse  <pre><code>``` bash tab=\"Linux\"\ncd src/web-portal\n\nnpm install\n\nnpm run prod\n\nsudo cp dist/web-portal/* ~/.letportal-pub/spa-web/ -r\n</code></pre></p>"},{"location":"deployment/one-machine/#publish-all-services","title":"Publish all services","text":"<p>You need to read this for more details. For brief, just use these commands below</p> <p>``` powershell tab=\"Window\" cd src\\web-apis</p> <p>.\\publish-win.ps1 -publishFolder \"D:.letportal-pub\\web-apis\"</p> <p>.\\run-win.ps1 -publishFolder \"D:.letportal-pub\\web-apis\" -environment \"Local\" <pre><code>``` bash tab=\"Linux\"\ncd src/web-apis\n\nsudo ./publish-lnx.sh\n\nsudo ./run-lnx.sh\n</code></pre></p>"},{"location":"deployment/one-machine/#configure-nginx","title":"Configure Nginx","text":"<p>Now if you ensure four services are running well, you continue to set up Nginx for allowing external clients to access.</p> <p>Nginx must listen on these ports to act as proxy forward a request to correct service.</p> <ul> <li>Identity APIs: 8081 - 51620 (Nginx listens  on 8081 then forward to local port 51620 which Identity APIs listens)</li> <li>Gateway APIs: 8080 - 53595</li> <li>SPA Web: 80</li> </ul> <p>Install Nginx</p> <p>I recommend you to do step by step in this guide. On Windows, you just install as usual.</p> <p>If you don't have an experience on Nginx, so you just copy and replace this <code>nginx.conf</code> file on <code>\\etc\\nginx</code> folder on Linux or <code>{your_installed_path}/nginx</code> on Windows</p> <p>``` Nginx tab=\"Basic nginx.conf\" user www-data; worker_processes auto; pid /run/nginx.pid; include /etc/nginx/modules-enabled/*.conf;</p> <p>events {     worker_connections 768;     # multi_accept on; }</p> <p>http {</p> <pre><code>##\n# Basic Settings\n##\n\nsendfile on;\ntcp_nopush on;\ntcp_nodelay on;\nkeepalive_timeout 65;\ntypes_hash_max_size 2048;\n# server_tokens off;\n\nserver_names_hash_bucket_size 64;\n# server_name_in_redirect off;\n\ninclude /etc/nginx/mime.types;\ndefault_type application/octet-stream;\n\n##\n# SSL Settings\n##\n\nssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE\nssl_prefer_server_ciphers on;\n\n##\n# Logging Settings\n##\n\n#access_log /var/log/nginx/access.log;\n#error_log /var/log/nginx/error.log;\n\n##\n# Gzip Settings\n##\n\ngzip on;\n\n# gzip_vary on;\n# gzip_proxied any;\n# gzip_comp_level 6;\n# gzip_buffers 16 8k;\n# gzip_http_version 1.1;\n# gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\n\n##\n# Virtual Host Configs\n##\n\ninclude /etc/nginx/conf.d/*.conf;\ninclude /etc/nginx/sites-enabled/*;\n\nserver {\n    listen       8080;\n    server_name _;\n    access_log /etc/nginx/logs/api.access.log;\n    error_log  /etc/nginx/logs/api.error.log;\n    location / {\n        proxy_pass         http://localhost:53595;\n        #proxy_http_version 1.1;\n        #proxy_set_header   Upgrade $http_upgrade;\n        #proxy_set_header   Connection keep-alive;\n        #proxy_set_header   Host $host;\n        #proxy_cache_bypass $http_upgrade;\n        #proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n        #proxy_set_header   X-Forwarded-Proto $scheme;\n    }\n}\n\nserver {\n    listen 8081;\n    server_name _;\n    #access_log /etc/nginx/logs/ids.access.log;\n    #error_log  /etc/nginx/logs/ids.error.log;\n    location / {\n        proxy_pass         http://localhost:51620;\n        #proxy_http_version 1.1;\n        #proxy_set_header   Upgrade $http_upgrade;\n        #proxy_set_header   Connection keep-alive;\n        #proxy_set_header   Host $host;\n        #proxy_cache_bypass $http_upgrade;\n        #proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n        #proxy_set_header   X-Forwarded-Proto $scheme;\n    }\n}\n</code></pre> <p>} <pre><code>## Configure SPA Web\n\nNginx must create `spa-web.conf` file on `nginx\\sites-available` with the content below:\n\n``` nginx\nserver {\n        listen 80;\n        listen [::]:80;\n\n        root $HOME/.letportal-pub/spa-web;\n        index index.html index.htm;\n\n        server_name letportal.internal;\n\n        location / {\n                try_files $uri $uri/ /index.html;\n        }\n}\n</code></pre></p> <p>You need to check a folder path on <code>root</code> section which matches your SPA web's deployment folder.</p> <p><code>server_name</code> must be a public domain or <code>local DNS name</code> in intranet.</p> <p>After you created this file successfully, you need to create a link from it to <code>sites-enabled</code> by command</p> <p>``` powershell tab=\"Windows\" Copy-Item -Path .\\sites-available\\spa-web.conf -Destination .\\sites-enabled\\ <pre><code>``` bash tab=\"Linux\"\nsudo ln -s /etc/nginx/sites-available/spa-web.conf /etc/nginx/sites-enabled/\n</code></pre></p>"},{"location":"deployment/one-machine/#configurate-services-on-startup","title":"Configurate Services on Startup","text":"<p>Nginx only helps you to forward a request to correct server. So it can't monitor a DotNET processes and wake them up when a server restarts. Thus you need to create a Window Service or Linux Service to wake them up.</p>"},{"location":"deployment/one-machine/#linux-service","title":"Linux Service","text":"<p>Edit a <code>run-lnx.sh</code> to adjust default absolute path on <code>$publishFolder</code> parameter</p> <pre><code>#!/bin/bash\npublishFolder=${1:-/home/demolnx/.letportal-pub/web-apis}\nenvironment=${2:-Local}\n</code></pre> <p>Create a service definition file:</p> <pre><code>sudo nano /etc/systemd/system/letportal-apis.service\n</code></pre> <p>Copy this content in this file</p> <pre><code>[Unit]\nDescription=Run all LET Portal services\n\n[Service]\n# Ensure installed MongoDB and some databases wake up\nExecStartPre=/bin/sleep 30\nExecStart=/home/demolnx/letportal.app/src/web-apis/run-lnx.sh\nExecStop=/home/demolnx/letportal.app/src/web-apis/shutdown-lnx.sh\nTimeoutStartSec=120\nType=oneshot\nRemainAfterExit=yes\nKillSignal=SIGINT\nSyslogIdentifier=letportal-apis\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Script path</p> <p>Because this service will run under <code>root</code> so you need to adjust your path in <code>ExecStart</code> and <code>ExecStop</code> </p> <p>Then you execute this bash to enable a service</p> <pre><code>sudo systemctl enable letportal-apis.service\n\nsudo systemctl start letportal-apis.service\n\nsudo systemctl status letportal-apis.service\n</code></pre> <p>The result should be</p> <pre><code>letportal-apis.service - Run all LET Portal services\n   Loaded: loaded (/etc/systemd/system/letportal-apis.service; enabled; vendor preset: enabled)\n   Active: active (exited) since Fri 2020-03-06 14:31:35 +07; 5min ago\n  Process: 864 ExecStartPost=/bin/sleep 60 (code=exited, status=0/SUCCESS)\n  Process: 754 ExecStart=/home/demolnx/letportal.app/src/web-apis/run-lnx.sh (code=exited, status=0/SUCCESS)\n Main PID: 754 (code=exited, status=0/SUCCESS)\n    Tasks: 31 (limit: 2245)\n   CGroup: /system.slice/letportal-apis.service\n           \u251c\u2500767 SCREEN -dmS letportal-sm\n           \u251c\u2500772 /bin/sh\n           \u251c\u2500780 SCREEN -dmS letportal-pt\n           \u251c\u2500782 /bin/sh\n           \u251c\u2500785 dotnet LetPortal.PortalApis.dll\n           \u251c\u2500787 SCREEN -dmS letportal-id\n           \u251c\u2500789 /bin/sh\n           \u251c\u2500794 SCREEN -dmS letportal-gw\n           \u2514\u2500796 /bin/sh\n</code></pre>"},{"location":"deployment/one-machine/#windows-startup","title":"Windows Startup","text":"<p>You can read this post to learn how to trigger <code>run-win.ps1</code> on Windows Startup</p>"},{"location":"deployment/some-services/","title":"Deployment - Server-side APIs","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"deployment/some-services/#deployment-checklist","title":"Deployment Checklist","text":"<p>There are a checklist for helping you to ensure a deployment is successful.</p> <ul> <li> Install MongoDB for Centralized Logs</li> <li> Run <code>letportal portal install</code> and <code>letportal identity install</code> if a database is empty</li> <li> Check the configuration files which match your target environment such as public endpoint, connection string, etc.</li> <li> Check your firewall rules on in/out</li> </ul>"},{"location":"deployment/some-services/#dotnet-cli","title":"Dotnet CLI","text":"<p>If you want to deploy one by one .NET Core project, so you can use Dotnet CLI for publishing an executable package.</p> <p>Reference docs</p> <p>Warning</p> <p>You should use <code>cd</code> to stay on the same folder of <code>*.csproj</code>. For example: you want to deploy IdentityAPIs, you need to stay on <code>src\\LetPortal.IdentityApis\\</code></p> <p>``` bash tab=\"window os x64\" dotnet build -c Release -o \"./Publish\" -r win10-x64 <pre><code>``` bash tab=\"linux x64\"\ndotnet build -c Release -o \"./Publish\" -r linux-x64\n</code></pre></p> <p>Then you move to your publish folder, use this command to run</p> <p>``` bash tab=\"window os x64\" $Env:ASPNETCORE_ENVIRONMENT=\"Local\"</p> <p>dotnet LetPortal.IdentityApis.dll <pre><code>``` bash tab=\"linux x64\"\nexport ASPNETCORE_ENVIRONMENT=Local\n\ndotnet LetPortal.IdentityApis.dll\n</code></pre></p>"},{"location":"deployment/some-services/#let-portal-script","title":"LET Portal script","text":"<p>For reducing your time, LET Portal also provides some scripts which help you to run all services as one. It is only available when you choose to deploy on one VM.</p> <p>These scripts locate on <code>src\\web-apis\\</code>, please ensure you don't move these files away.</p>"},{"location":"deployment/some-services/#publish-all-services","title":"Publish all services","text":"<p>``` powershell tab=\"window\" .\\publish-win.ps1 \"C:\\Publish\" <pre><code>``` bash tab=\"linux\"\nsudo ./publish-lnx.sh ~/.letportal-pub\n</code></pre></p>"},{"location":"deployment/some-services/#run-all-services","title":"Run all services","text":"<p>``` powershell tab=\"window\" .\\run-win.ps1 \"C:\\Publish\" \"Local\" <pre><code>``` bash tab=\"linux\"\nsudo ./run-lnx.sh ~/.letportal-pub Local\n</code></pre></p> <p>Install screen</p> <p>On Linux, you MUST to install <code>screen</code> command before running <code>run-lnx.sh</code></p>"},{"location":"deployment/some-services/#linux-screen","title":"Linux screen","text":"<p>If you want to check services are running on Linux, you need to use this command below</p> <p>``` bash tab=\"Linux\" sudo screen -ls <pre><code>So the result should be\n\n``` bash\n23242.letportal-gw (Detached)\n23222.letportal-id (Detached)\n23342.letportal-pt (Detached)\n23252.letportal-sm (Detached)\n</code></pre></p> <p>For checking each service, you need to use</p> <pre><code>sudo screen -r {letportal-gw | letportal-id | letportal-pt | letportal-sm }\n</code></pre>"},{"location":"deployment/some-services/#shutdown","title":"Shutdown","text":"<p>On Windows, you just close four command line windows, but on Linux, you need to run this command</p> <pre><code>sudo .\\shutdown-lnx.sh\n</code></pre>"},{"location":"fundamentals/chaining-events/","title":"Fundamentals - Chaining Events","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"fundamentals/chaining-events/#event-name","title":"Event name","text":"<p>Before we go further, we need to know which name for each event. By default, a format name should be <code>{section-name}_{control-name}_{event-name}</code>. For example: appform_name_change refers to appform section, name control and change event. A name must be unique per event on one page, so we don't have any two sections has a same name.</p>"},{"location":"fundamentals/chaining-events/#control-event-types","title":"Control Event Types","text":"<p>All controls have only one change event at the moment.</p> <ul> <li><code>change</code>: when control changed a value, this event will be notified, include some complicated controls such as AutoComplete</li> </ul>"},{"location":"fundamentals/chaining-events/#control-action-event-types","title":"Control Action Event Types","text":"<p>Different with event type, this is a built-in execution event type which helps you to execute some behaviors according to control event type.</p> <ul> <li>Trigger Events: LET Portal will notify some <code>built-in behaviors</code> which have been defined for control behaviors<ul> <li><code>change</code>: By default, it only triggers a <code>change</code> event of control, no data will be set. Useful for triggering another chaining events of target control</li> <li><code>rebound</code>: It will get a current data on State Management to set. Useful for some interpreting actions. </li> <li><code>clean</code>: It will set <code>null</code> or <code>true/false</code> based on control type</li> <li><code>reset</code>: It will set an initial data. an initial data is a data from page's datasource or <code>null</code> when a page doesn't have any datasource</li> <li><code>resetdatasource</code>: Important behavior for Select/AutoComplete, it will refetch a datasource and bind. Useful for many contraints of one dropdown datasource (e.g City District Ward)</li> </ul> </li> <li>Query Database: Query from database to get a data which will be filled to relating controls. Useful for filling constraints data</li> <li>Web Service: Call Web Service to get a data which will be filled to relating controls. Useful for filling constraints data   </li> </ul>"},{"location":"fundamentals/chaining-events/#chaining-events-flow","title":"Chaining Events Flow","text":""},{"location":"fundamentals/chaining-events/#chaining-events-flow-deeper-view","title":"Chaining Events Flow - Deeper View","text":""},{"location":"fundamentals/concepts/","title":"LET Portal Fundamentals - Concepts","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"fundamentals/concepts/#seperation-of-page","title":"Seperation of Page","text":"<p>As a mockup above, we have some notes below:</p> <ul> <li>Each page has an uniqube pageName, it will be accessed via url (a pattern is portal/page/:pageName)</li> <li>A page consists of many sections</li> <li>Each section has a specific Construction Type or Component Type (such as Standard, Chart or Dynamic List)</li> <li>Section width uses Bootstrap Grid to split into 12 columns in technical viewpoint, we call it \"Layout Type\" when you create one Component (Note: only Dynamic List has one Layout Type is full-width)</li> <li>Each page has these commands. They are hidden by a menu button on the right side.</li> </ul>"},{"location":"fundamentals/concepts/#page-render-flow-architecture","title":"Page Render flow architecture","text":""},{"location":"fundamentals/concepts/#data-flow-architecture","title":"Data flow architecture","text":"<p>Flux Architecture</p> <p>LET Portal is using Flux architecture to control a data flow of page. According to Angular framework, we are using NGXS library which is state management built on top of Flux architecture</p> <p>As a screenshot above, we hope that you can clearly understand a data flow of LET Portal's page. Thus we brief some main points below:</p> <ul> <li>When a control changes value, it calls PageService for sending a change action</li> <li>A change action will send a new value to redurer for updating a state management</li> <li>PageService must subcribe a new state for keeping a copied data. PageService will use this data for translating some evaluated expression. We will discuss later.</li> <li>In the meantime, control will notify a chaining events action that has been configured on Standard Builder page. It will help some controls to be aware or reacting this change.</li> </ul>"},{"location":"fundamentals/concepts/#whats-next","title":"What's Next?","text":"<p>You knonw some concepts and ideas behind LET Portal, let's discuss on State Management and how a page can munipulate a State Management on multiple sections</p> <ul> <li>State Management</li> <li>Chaining Events</li> </ul>"},{"location":"fundamentals/state-management/","title":"Fundamentals - State Management","text":"<p>The documentation applies to: v0.9.0</p>"},{"location":"fundamentals/state-management/#state-management-combination-on-page","title":"State Management - Combination on Page","text":"<p>For an idea of manipulating data on Page, we use a State Management for handling the changes. Basically, we need to ensure no concurrent changes to update a <code>data</code>.</p> <p>On an initial step, we will get the datasources for Page. These datasources must have an unique name. <code>data</code> is a key name which we store in State Management. Thus a combination of datasources is following the screenshot below:</p> <p></p> <p>Important</p> <p>If you access to State Management, you need to access via <code>data</code>. <code>data</code> will be used everywhere on LET Portal. Thus you know clearly about a combination above, you won't get any trouble on another document.</p>"},{"location":"fundamentals/state-management/#explanation","title":"Explanation","text":"<p>Now let's write down one by one step to help you understand clearly. Imagine you have the user info page which includes two sections: one is user info and one is profile. So the data value is</p> <p>``` json tab=\"data\" {     \"username\": \"admin\",     \"email\": \"admin@letportal.com\",     \"profile\": {         \"fullName\": \"Johnathan Le\",         \"birthday\": \"11/11/1991\"     } } <pre><code>And the configuration of two sections are\n\n``` json tab=\"userinfo\"\n// datasourceBindName = \"data\" -&gt; Bind property value from \"data\" datasource\n// storeName = NULL\n\n{\n    \"username\": {\n        \"type\": \"Textbox\",\n        \"bindName\": \"username\"\n    },\n    \"email\": {\n        \"type\": \"Email\",\n        \"bindName\": \"email\"\n    }\n}\n</code></pre></p> <p>``` json tab=\"profile\" // datasourceBindName = \"data\" -&gt; Bind property value from \"data\" datasource // storeName = \"profile\" -&gt; Help to store to \"profile\" property in \"data\"</p> <p>{     \"fullName\": {         \"type\": \"Textbox\",         \"bindName\": \"fullName\"     },     \"birthday\": {         \"type\": \"Datepicker\",         \"bindName\": \"birthday\"     } } <pre><code>So each time these inputs change its value, the **data** object will be updated.\n\n# State Management - Array on Page\n\nOn Standard Array, if `allowupdateparts` option is `false`, `data` will store two groups as `inserts` and `removes`. Otherwise, `data` will store four groups such as `fresh`, `inserts`, `removes`, `updates`.\n\nSo let's explain about the `allowupdateparts` option. This options is used to indicate a proccess way of array data:\n\n- `allowupdateparts` is `false`: means you want to remove all and then insert all, so that you have two groups `inserts` and `removes`. LP will help you to maintain two groups until user submits. Usage: very usefull for non-reference children, means a child doesn't have any external reference to this.\n- `allowupdateparts` is `true`: means you want to update a few children, remove few children and insert a few children. So that you have four groups `fresh`, `inserts`, `removes` and `updates`. Usage: very useful for optimizing performance, and a child has external references to this.\n    - `fresh`: contains all initial children data that are received from datasource. After that, each action on array will move one item from this list to `inserts`, `removes`, `updates` regarding action type.\n    - `inserts`: When user add one item, it will be added into this group\n    - `removes`: When user remove one item, it will be added into this group\n    - `updates`: When user update one item which has been on `fresh`, it will be moved to this group. Otherwise, a new item on `inserts` will be updated instead.\n\nWe will discuss later about how to use these groups on Page Button.\n\n![State Management Array](../assets/images/fundamentals/State-Management-Array-Concept.png)\n\n!!! warning \"Restriction\"\n    State Management supports only Standard section, we don't find any use-cases for Dynamic List or Chart. If you have any idea, please feedback to us.\n\n# State Management - Tree\n\nIf you want to manipulate the data that looks like **tree**, this feature is for you. \n\n![Tree state](../assets/images/fundamentals/StateManagement-Tree.png)\n\nLet take a look on an sample of the **nest** data below:\n\n``` json tab=\"Menu\"\n    [\n        {\n            \"name\": \"Core\",\n            \"url\": \"#\",\n            \"sub\": [\n                {\n                    \"name\": \"Apps\",\n                    \"url\": \"/apps\"\n                },\n                {\n                    \"name\": \"Pages\",\n                    \"url\": \"/pages\"\n                },\n            ]\n        },\n        {\n            \"name\": \"Builder\",\n            \"url\": \"/builder\"\n        }\n    ]\n</code></pre></p> <p>You want to the data can be add/remove/update one child element by constructing to Tree component.</p> <p>Based on the data structure, Tree must be configurated by these settings below.</p> <p><code>json tab=\"Options\" {     // Define the in data structure is nest data. Accepted value: nest|flat     \"indatastructure\": \"nest\",     // Define the out data structure is nest data, it will be stored in the data state. Accepted value: nest|flat     \"outdatastructure\": \"nest\",     // Field will be used to display as name in Tree     \"displayname\": \"name\",     // Reference to the property name of array. Help to lookup the children data     \"inchildren\": \"sub\",     // Reference to the property name of array. It is the name of array property of data state.     \"outchildren\": \"sub\" }</code></p> <p>You can open the App Menu Builder page to understand how these options work.</p>"},{"location":"getting-started/let-start/","title":"Getting Started - Start LET Portal","text":"<p>The documentation applies to: v0.9.0</p>"},{"location":"getting-started/let-start/#preparation","title":"Preparation","text":"<p>You should ensure all these steps have been completed before reaching here:</p> <ul> <li>Install all prerequisites</li> <li>Do a basic installation step</li> <li>Ensure MongoDB has been installed in your PC, read here</li> </ul>"},{"location":"getting-started/let-start/#wake-up-let-portal","title":"Wake up LET Portal","text":"<p>Before doing these steps, you should move to <code>.\\src\\web-apis</code> and Docker must be running (and Docker compose has been installed as well)</p>"},{"location":"getting-started/let-start/#step-1-start-server-side","title":"Step 1: Start server side","text":"<p>``` powershell tab=\"Powershell\" docker-compose up <pre><code>``` bash tab=\"Ubuntu\"\ndocker-compose -f docker-compose-lnx.yml up\n</code></pre></p>"},{"location":"getting-started/let-start/#step-2-run-client-side","title":"Step 2: Run client-side","text":"<p>You should move to client-side folder by exectuing this command</p> <p>``` powershell tab=\"Powershell\" cd .\\src\\web-portal <pre><code>``` bash tab=\"Ubuntu\"\ncd ./src/web-portal\n</code></pre></p> <p>If you don't have <code>Typescript</code> yet, so execute this command</p> <pre><code>npm install -g typescript\n</code></pre> <p>Then, use <code>npm</code> to install all libararies</p> <pre><code>npm install\n</code></pre> <p>After you restore all libraries, you can run a client-side by this command</p> <pre><code>npm run debug\n</code></pre> <p>Now you open a browser and type these urls following the order:</p> <ul> <li>https://localhost:5102 Saturn API</li> <li>https://localhost:5104 CMS Endpoint - optional</li> <li>https://localhost:4200 SPA Web</li> </ul> <p>You will see this screen below</p> <p></p> <p>Congratulation! You have run LET Portal sucessfully. Let's do a next step or you can switch some parts below:</p>"},{"location":"getting-started/your-first-app/","title":"Getting Started - Your first app","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"getting-started/your-first-app/#step-1-go-to-app-builder-page","title":"Step 1: Go to App Builder page","text":"<p>After you login successfully with default admin / @Dm1n!. On Apps List page, clicks on  to show \"Create\" button. Click on that to redirect to App Builder page.</p> <p></p>"},{"location":"getting-started/your-first-app/#step-2-create-an-app","title":"Step 2: Create an app","text":"<p>You need to fill out all fields with these values below:</p> <ul> <li>Enters \"monitorsapp\" on Name field</li> <li>Enters \"Monitors\" on Display Name field</li> <li>Enters \"portal/page/user-sessions-list\" on Default Url field</li> <li>Enters \"1.0.0\" on Version field</li> <li>Enters \"memory\" on Icon field</li> </ul> <p>Then you clicks on \"Save\" button to create an app</p> <p></p>"},{"location":"getting-started/your-first-app/#step-3-create-a-menu-for-new-app","title":"Step 3: Create a menu for new app","text":"<p>On Apps List page, you click on \"Menu\" button on the same row of your created app.</p> <p></p> <p>On Menu Builder page, you won't see anything here because no menu has been added. Now you click on \"Add menu\" button on the left side.</p> <p></p> <p>On a dialog, you enter \"User Monitor\" on \"Menu Name\" field and choose \"account_circle\" on \"Icon\" field. Then you click on \"Save\" button</p> <p></p> <p>Next, you need to create at least one sub menu. Click on \"plus\" icon next to your new menu, then click \"Add child\"</p> <p></p> <p>On a dialog, you choose \"User Sessions Monitor\" on \"Pick one url\" field and choose \"queue_play_next\" icon on \"Icon\" field. These fields will be auto-generated. Save this sub menu by clicking on \"Save\" button.</p> <p>Now you continue to click on \"plus\" icon on the same row of \"User Sessions Monitor\", click on \"Add Below\" to add \"User Sessions List\" node (you can choose any icon)</p> <p>Later, you need to save a menu by clicking on \"Save\" button on the left side.</p> <p></p>"},{"location":"getting-started/your-first-app/#step-4-assign-an-app-to-your-role","title":"Step 4: Assign an app to your role","text":"<p>Click on left menu, under Identity, choose \"Roles Management\" to redirect to \"Roles Management\" page.</p> <p>Click on \"Lock\" icon on the same row of \"SuperAdmin\" role.</p> <p></p> <p>On Role Claims page, you need to tick on \"Monitors\" under Apps node on a left Claims tree.</p> <p>Next you need to enter \"User Session\" on \"Search\" textbox, tick on \"Allow Page Access\" on two page \"User Sessions Monitor\" and \"User Sessions List\". After that, click on \"Save\" button on the left side.</p> <p></p>"},{"location":"getting-started/your-first-app/#step-5-verify-new-app","title":"Step 5: Verify new app","text":"<p>Now you need to sign out and then sign in again. You will see a new app after you sign in successfully.</p> <p></p> <p>Congratulation! You learned how to create one app and how to integrate with Role-Based Authorization</p>"},{"location":"getting-started/your-first-chart/","title":"Getting Started - Your first chart","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"getting-started/your-first-chart/#what-is-chart","title":"What is Chart?","text":"<p>A brief of Chart is a section type. It helps you can build quickly a Chart for Dashboard or Reporting.</p> <p>These steps below will help you to create one page with chart</p>"},{"location":"getting-started/your-first-chart/#step-1-go-to-chart-builder-page","title":"Step 1: Go to Chart Builder Page","text":"<p>After you login successfully with default admin / @Dm1n!. On Apps List page, you choose a menu by clicking on a left menu icon on Header. Then clicks on Page Settings, and clicks on Charts Management.</p> <p>Then you choose  on the right side of list, it will display a Create button, so click on this.</p> <p></p>"},{"location":"getting-started/your-first-chart/#step-2-fill-out-chart-info","title":"Step 2: Fill out Chart Info","text":"<p>You enter a text \"User Session Report\" on \"Display Name\" field, \"Name\" and \"Chart Title\" will be auto-generated.</p> <p>On \"Layout Type\", choose a three columns picture (a third choice)</p> <p>On \"Chart Type\", choose Number Card</p> <p>On \"Mapping Projection\", enter \"name=name;value=value\"</p> <p></p> <p>Now take a look on Chart Options section below, you should change these values by clicking on \"Value\" column</p> <ul> <li>\"allowrealtime\", change \"false\" to \"true\"</li> </ul> <p></p> <p>You click on \"Next\" button to move on Databases &amp; Filters section</p>"},{"location":"getting-started/your-first-chart/#step-3-fill-a-query","title":"Step 3: Fill a query","text":"<p>On \"Connections\", choose Identity Database</p> <p>On \"Choose Entity\", choose usersessions</p> <p>Tip</p> <p>If you don't see \"usersessions\" option, please press on \"refresh icon\" next to \"Connections\"</p> <p>On \"Query\", copy this json and parse</p> <pre><code>{\n  \"$query\": {\n    \"usersessions\": [\n      {\n        \"$match\": {\n          \"alreadySignOut\": false,\n          \"signInDate\": {\n            \"$gte\": \"ISODate('{{currentISODate(-3600)}}')\"\n          }\n        }\n      },\n      {\n        \"$count\": \"signincounts\"\n      },\n      {\n        \"$project\": {\n          \"name\": \"Activate Users\",\n          \"value\": \"$signincounts\"\n        }\n      }\n    ]\n  }\n}\n</code></pre> <p>Then you click on \"Save\" button in the top right. </p> <p></p>"},{"location":"getting-started/your-first-chart/#step-4-connect-with-a-page","title":"Step 4: Connect with a page","text":""},{"location":"getting-started/your-first-chart/#step-41-create-a-page","title":"Step 4.1: Create a page","text":"<p>We have one section component which is ready to intergate a page. Now open a left menu, choose Page Settings, then clicks on Pages Management.</p> <p>On Pages Management, clicks on  then clicks on Create</p> <p></p>"},{"location":"getting-started/your-first-chart/#step-42-fill-out-page-options","title":"Step 4.2: Fill out Page Options","text":"<p>On a first step, you should fill out a Display Name. So you should enter a text User Sessions Monitor</p> <p>Tip</p> <p>Page name and url will be auto-generated according to your Display Name.</p> <p>There are nothing here you should warn, presses on Next button to move Sections step</p> <p></p>"},{"location":"getting-started/your-first-chart/#step-43-add-section","title":"Step 4.3: Add Section","text":"<p>Following this screenshot below to help add a section</p> <p></p> <p>This step will open up a Section dialog. You need to enter some infos:</p> <ul> <li>Choose Chart on \"Choose Construction Type\"</li> <li>Choose User Sessions Monitor on \"Choose Chart\"</li> <li>Enter Active Users (one hour) on \"Display Name\"</li> </ul> <p>After that, presses on Save button to close a dialog</p>"},{"location":"getting-started/your-first-chart/#step-44-save-a-creating-page","title":"Step 4.4: Save a creating page","text":"<p>Now, there are nothing to do here. Just save your page by clicking on Save button of .</p> <p></p>"},{"location":"getting-started/your-first-chart/#step-5-test-a-page","title":"Step 5: Test a page","text":"<p>After a page created, on Pages Management, type User Sessions on Search textbox to find your page, then presses Search button</p> <p></p> <p>You just highlight an url and copy this.</p> <p>Now look on a browser's url, replace a string portal/page/pages-management by your copied url. Then press on Enter to redirect to your page.</p> <p></p> <p>If you can reach here, so you test successfully a page.</p> <p>Congratulation! You have created one page by LET Portal Mechanism. We will guide you to work with two remaining components that are Standard and Dynamic List.</p>"},{"location":"getting-started/your-first-dynamic-list/","title":"Getting Started - Your first dynamic list","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"getting-started/your-first-dynamic-list/#what-is-dynamic-list","title":"What is Dynamic List?","text":"<p>A brief of Dynamic List is a section type. It helps you can build quickly a Grid Data.</p> <p>These steps below will help you to create one page with dynamic list</p>"},{"location":"getting-started/your-first-dynamic-list/#step-1-go-to-dynamic-list-builder-page","title":"Step 1: Go to Dynamic List Builder Page","text":"<p>After you login successfully with default admin / @Dm1n!. On Apps List page, you choose a menu by clicking on a left menu icon on Header. Then clicks on Page Settings, and clicks on Dynamic List Management.</p> <p>Then you choose  on the right side of list, it will display a Create button, so click on this.</p> <p></p>"},{"location":"getting-started/your-first-dynamic-list/#step-2-populate-columns","title":"Step 2: Populate columns","text":"<p>On Dynamic List Info section, you enter a text \"User Sessions List\" then click on \"Next\" button</p> <p>On Database Connection Info section, choose \"Identity Database\" on Connections field, then choose \"usersessions\" on *Choose Entity\" field.</p> <p>Tip</p> <p>If you don't see \"usersessions\" option, please press on \"refresh icon\" next to \"Connections\"</p> <p>After that, you click on \"Populate\" button to generate columns</p> <p></p>"},{"location":"getting-started/your-first-dynamic-list/#step-3-create-dynamic-list","title":"Step 3: Create Dynamic List","text":"<p>If these columns appear as screenshot above, so you can save this dynamic list. Clicks on , then \"Save\" button.</p> <p>You will see you redirect to Dynamic List Management page and a save successfully toast.</p>"},{"location":"getting-started/your-first-dynamic-list/#step-4-connect-with-a-page","title":"Step 4: Connect with a page","text":""},{"location":"getting-started/your-first-dynamic-list/#step-41-create-a-page","title":"Step 4.1: Create a page","text":"<p>We have one section component which is ready to intergate a page. Now open a left menu, choose Page Settings, then clicks on Pages Management.</p> <p>On Pages Management, clicks on  then clicks on Create</p> <p></p>"},{"location":"getting-started/your-first-dynamic-list/#step-42-fill-out-page-options","title":"Step 4.2: Fill out Page Options","text":"<p>On a first step, you should fill out a Display Name. So you should enter a text User Sessions List</p> <p>Tip</p> <p>Page name and url will be auto-generated according to your Display Name.</p> <p>There are nothing here you should warn, presses on Next button to move Sections step</p> <p></p>"},{"location":"getting-started/your-first-dynamic-list/#step-43-add-section","title":"Step 4.3: Add Section","text":"<p>Following this screenshot below to help add a section</p> <p></p> <p>This step will open up a Section dialog. You need to enter some infos:</p> <ul> <li>Enter User Sessions List on Display Name field</li> <li>Choose Dynamic List value as default on Construction Type field</li> <li>Choose User Session List which you have created on a step 4 on Choose Standard</li> </ul> <p>After that, presses on Save button to close a dialog</p>"},{"location":"getting-started/your-first-dynamic-list/#step-44-save-a-creating-page","title":"Step 4.4: Save a creating page","text":"<p>Now, there are nothing to do here. Just save your page by clicking on Save button of .</p> <p></p>"},{"location":"getting-started/your-first-dynamic-list/#step-5-test-a-page","title":"Step 5: Test a page","text":"<p>After a page created, on Pages Management, type User Sessions on Search textbox to find your page, then presses Search button</p> <p></p> <p>You just highlight an url and copy this.</p> <p>Now look on a browser's url, replace a string portal/page/pages-management by your copied url. Then press on Enter to redirect to your page.</p> <p></p> <p>If you can reach here, so you test successfully a page.</p> <p>Congratulation! You have created one page by LET Portal Mechanism. We will guide you to work with two remaining components that are Standard and Chart.</p>"},{"location":"getting-started/your-first-standard/","title":"Getting Started - Your first standard page","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"getting-started/your-first-standard/#what-is-standard-component","title":"What is Standard Component?","text":"<p>A brief of Standard Component is a section type, a page has multiple sections. Read here for more concepts.</p> <p>These steps below will help you to create one page with standard component.</p>"},{"location":"getting-started/your-first-standard/#step-1-login","title":"Step 1: Login","text":"<p>Enter your admin account, by default, it is admin / @Dm1n!, then click on Login button</p> <p>Press Enter</p> <p>You can press Enter after filling username/password</p> <p>After you login successfully, click on Enter under Core app </p> <p></p>"},{"location":"getting-started/your-first-standard/#step-2-go-to-standard-builder-page","title":"Step 2: Go to Standard Builder Page","text":"<p>On Apps List page, you choose a menu by clicking on a left menu icon on Header. Then clicks on Page Settings, and clicks on Standards Management.</p> <p></p> <p>Then you choose  on the right side of list, it will display a Create button, so click on this.</p> <p>Tip</p> <p>For UI consistency, you need to click on  to find more buttons on a page.</p> <p></p>"},{"location":"getting-started/your-first-standard/#step-3-populate-controls","title":"Step 3: Populate controls","text":"<p>You need to fill out some simple fields below:</p> <ul> <li>Display Name: Put any name will be displayed on Standards List</li> <li>Name: this field will be auto-generated while you are entering Display Name</li> <li>Layout Type: There are four types which are prefering to Bootstrap Grid system, if you don't have any idea, just skip as default</li> </ul> <p>On an example, we fill out these infos </p> <p></p> <p>Now take a look on Controls Population, you should do three steps below:</p> <ul> <li>On Connections, selects Identity Database</li> <li>Selects usersessions from Choose Entity dropdown</li> <li>Presses on Populate button</li> </ul> <p>Tip</p> <p>If you don't see \"usersessions\" option, please press on \"refresh icon\" next to \"Connections\"</p> <p></p> <p>If everything is fine, you should see many controls dispaly under Controls section</p>"},{"location":"getting-started/your-first-standard/#step-4-edit-one-control","title":"Step 4: Edit one control","text":"<p>Before editting one control, you can see id and userId controls here. But don't worry, they will be hide by default.</p> <p>Now, let's start editting one control and then you can repeat by yourself for all controls.</p> <ul> <li>Clicks on a pencil icon (Edit button), it will pop up a dialog</li> <li>Scroll down and clicks on a text Installed Version\" on a same line of *label row</li> <li>Types a new text \"Verion\"</li> <li>Presses on Save button</li> </ul> <p></p> <p>You can do it with others. After everything is ok, sroll up and clicks on , then \"Save\" button for creating a one Stardand Component.</p> <p>You should check a result below </p>"},{"location":"getting-started/your-first-standard/#step-5-connect-with-a-page","title":"Step 5: Connect with a page","text":""},{"location":"getting-started/your-first-standard/#step-51-create-a-page","title":"Step 5.1: Create a page","text":"<p>We have one section component which is ready to intergate a page. Now open a left menu, choose Page Settings, then clicks on Pages Management.</p> <p>On Pages Management, clicks on  then clicks on Create</p> <p></p>"},{"location":"getting-started/your-first-standard/#step-52-fill-out-page-options","title":"Step 5.2: Fill out Page Options","text":"<p>On a first step, you should fill out a Display Name. So you should enter a text User Session</p> <p>Tip</p> <p>Page name and url will be auto-generated according to your Display Name.</p> <p>There are nothing here you should warn, presses on Next button to move Sections step</p> <p></p>"},{"location":"getting-started/your-first-standard/#step-53-add-section","title":"Step 5.3: Add Section","text":"<p>Following this screenshot below to help add a section</p> <p></p> <p>This step will open up a Section dialog. You need to enter some infos:</p> <ul> <li>Enter User Session Form on Display Name field</li> <li>Choose Standard value as default on Construction Type field</li> <li>Choose User Session Form which you have created on a step 4 on Choose Standard</li> </ul> <p>After that, presses on Save button to close a dialog</p> <p></p>"},{"location":"getting-started/your-first-standard/#step-54-save-a-creating-page","title":"Step 5.4: Save a creating page","text":"<p>Now, there are nothing to do here. Just save your page by clicking on Save button of .</p> <p></p>"},{"location":"getting-started/your-first-standard/#step-6-test-a-page","title":"Step 6: Test a page","text":"<p>After a page created, on Pages Management, type User Session on Search textbox to find your page, then presses Search button</p> <p></p> <p>You just highlight an url and copy this.</p> <p>Now look on a browser's url, replace a string portal/page/pages-management by your copied url. Then press on Enter to redirect to your page.</p> <p></p> <p>If you can reach here, so you test successfully a page.</p> <p>Congratulation! You have created one page by LET Portal Mechanism. We will guide you to work with two remaining components that are Dynamic List and Chart.</p>"},{"location":"installation/basic/","title":"LET Portal Installtion - Basic","text":"<p>The documentation applies to: v0.9.0</p>"},{"location":"installation/basic/#download-let-portal","title":"Download LET Portal","text":"<p>Because LET Portal is a set of services so we can't package into one installation file. You should download a tag v0.9.0-r1.1 code in this Github repo</p> <p>After downloading a source code and extracting zip package, you MUST do exactly some steps below.</p>"},{"location":"installation/basic/#step-1-choose-database-to-install","title":"Step 1: Choose Database to install","text":"<p>As we mentioned, you should pick one database for installing LET Portal. LET Portal, by default, requires one database on the same database software. The database name should be:</p> <ul> <li>letportal: main database, store all data which relate to LET Portal</li> <li>cms: cms database, it is an optional to run CMS</li> </ul> <p>Table below contains all default connections which include username/password which are using to connect your database in LET Portal CLI.</p> Database Connection String Username/Password DB Permission MongoDB mongodb://localhost:27017/letportal SQLServer Server=.;Database=letportal;User Id=sa;Password=123456; sa/123456 sysadmin PostgreSQL Host=localhost;Port=5432;Database=letportal;Username=postgres;Password=123456 postgres/123456 Superuser or (CanLogin and Create databases) MySQL server=localhost;uid=root;pwd=123456;database=letportal root/123456"},{"location":"installation/basic/#step-2-change-configuration-files","title":"Step 2: Change configuration files","text":"<p>By default, if you install the database with default username/password which we noticed above, you don't need to change any configuration. For changing a correct configuration, you should check carefully these configuration files below:</p> File Line Change to Note src\\web-apis\\LetPortal.Saturn\\appsettings.json 2 Your connection string src\\web-apis\\LetPortal.Saturn\\appsettings.Docker.json 2 Your connection string src\\web-apis\\LetPortal.Saturn\\appsettings.Production.json 2 Your connection string src\\web-apis\\LetPortal.Saturn\\Files\\WebsiteCMS\\v1.0\\appsettings.json 2 Your connection string src\\web-apis\\LetPortal.Saturn\\Files\\WebsiteCMS\\v1.0\\appsettings.Docker.json 2 Your connection string src\\web-apis\\LetPortal.Saturn\\Files\\WebsiteCMS\\v1.0\\appsettings.Production.json 2 Your connection string src\\LetPortal.Tools\\tools.json 1 Your connection string Find your correct database to change. Ex: MongoDB is MongoStoringConnections section src\\LetPortal.Tools\\tools.json CMSToolOptions Your connection string Find your correct database to change. Ex: MongoDB is MongoStoringConnections section <p>For quick preference, this is a sample of one change in Saturn's appsetting.json file. The current database is MongoDB</p> <p><pre><code>\"DatabaseOptions\": {\n    \"ConnectionString\": \"mongodb://localhost:27017\",\n    \"DataSource\": \"letportal\",\n    \"ConnectionType\": \"MongoDB\"\n  }\n</code></pre> You need to change this into SQLServer</p> <p><pre><code>\"DatabaseOptions\": {\n    \"ConnectionString\": \"Server=.;Database=letportal;User Id=sa;Password=123456;\",\n    \"DataSource\": \"letportal\",\n    \"ConnectionType\": \"SQLServer\"\n  }\n</code></pre> There are string list which you should change in <code>ConnectionType</code> field</p> <p><code>MongoDB</code> <code>SQLServer</code> <code>PostgreSQL</code> <code>MySQL</code> </p> <p>tools.json</p> <p>This file is used to insert a database connection into Portal database for constructing some dynamic list. You just change an appropriate connection following its database. Also, each database connection group has three child connections: Portal, Identity and Service Management. You should change them to your target database. All target database MUST be the same (ex: all are letportal instead of different name)</p>"},{"location":"installation/basic/#step-3-run-installation-script","title":"Step 3: Run installation script","text":"<p>On Windows, open your Powershell (press Win + X A), move to your source code folder then execute</p> <p>``` powerShell tab=\"Powershell\" .\\src\\web-apis\\installation.ps1 <pre><code>``` bash tab=\"Ubuntu\"\nsudo ./src/web-apis/installation.sh\n</code></pre></p> <p>Close Powershell window or logout ubuntu for making sure a script is effective</p>"},{"location":"installation/basic/#step-4-install-database-with-cli","title":"Step 4: Install Database with CLI","text":"<p>You need to run LET Portal CLI for installing database. Before running the CLI, you must know your installing database connection (Ex: IP, Port, SSL) from your executing CLI machine to.</p> <p>We strongly recommend you to write down the {Your database connection} in Notepad.</p>"},{"location":"installation/basic/#docker-default-and-recommended-scenario","title":"Docker - Default and recommended scenario","text":"<p>If you run LET Portal with Docker on Local, they have two scenarios: the database stays on Host (your PC) and the database stays on Docker Container.</p> <ul> <li>Host: You must change the database connection as Step 3, the connection looks like host.docker.internal:{Port}. Then the connection should look like localhost:{Port}. Ex: mongodb://localhost:27017.</li> <li>Container: Nothing to change as Step 3, the connection should look like localhost:{Docker Port}. Ex: you bind MongoDb to port 27117:27017 , the connection will be mongodb://localhost:27117</li> </ul> <p>With the connection above and MongoDB is default database, on Docker Container</p> <pre><code># The database name should be letportal\nletportal portal install -c mongodb://localhost:27117/letportal\nletportal portal install -c mongodb://localhost:27117/letportal -pn cms\nletportal identity install -c mongodb://localhost:27117/letportal\nletportal identity install -c mongodb://localhost:27117/letportal -pn cms\n\n# The database name should be cms\nletportal blog install -c mongodb://localhost:27117/cms \n</code></pre> <p>With SQL Server, on Docker Host</p> <pre><code># The database name should be letportal\nletportal portal install -c Server=.;Database=letportal;User Id=sa;Password=123456; -db sqlserver\nletportal portal install -c Server=.;Database=letportal;User Id=sa;Password=123456; -pn cms -db sqlserver\nletportal identity install -c Server=.;Database=letportal;User Id=sa;Password=123456; -db sqlserver\nletportal identity install -c Server=.;Database=letportal;User Id=sa;Password=123456; -pn cms -db sqlserver\n\n# The database name should be cms\nletportal blog install -c Server=.;Database=cms;User Id=sa;Password=123456; -db=sqlserver\n</code></pre>"},{"location":"installation/prerequisites/","title":"LET Portal Installtion - Prerequisites","text":"<p>The documentation applies to: v0.9.0</p> <p>Before you begin, ensure your environment has been installed these softwares below</p>"},{"location":"installation/prerequisites/#nodejs-npm-angular-cli","title":"Nodejs, NPM &amp; Angular CLI","text":"<p>For NodeJS, we prefer to get LTS version for making sure it works smoothly, you can get by this link below</p> <p>Nodejs 12.16.0 LTS</p> <p>For npm, it is included in Nodejs by default. If you want to upgrade npm because Angular, so try this command</p> <p><code>npm install -g npm@latest</code></p> <p>For Angular and Angular CLI, we prefer to install version 9.1.3</p> <p>Checkpoint</p> <p><code>npm install -g @angular/cli@9.1.3</code></p>"},{"location":"installation/prerequisites/#net-core","title":".NET Core","text":"<p>On Windows OS, you can go this link to download version 3.1</p> <p>On Ubuntu OS, you need to execute these commands below</p> <pre><code>wget -q https://packages.microsoft.com/config/ubuntu/19.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb\n\nsudo dpkg -i packages-microsoft-prod.deb\n\nsudo apt-get update\n\nsudo apt-get install apt-transport-https\n\nsudo apt-get update\n\nsudo apt-get install dotnet-sdk-3.1\n</code></pre>"},{"location":"installation/prerequisites/#optional-create-self-signed-certificate","title":"Optional: Create self-signed certificate","text":"<p>If you have a plan to use LET Portal without Proxy server or debugging on Local, you should create self-signed certificate to run.</p> <p>``` powershell tab=\"Windows\" dotnet dev-certs https -ep ${USERPROFILE}.aspnet\\https\\letportal.pfx -p letportal dotnet dev-certs https -ep ${USERPROFILE}.aspnet\\https\\letportal-cms.pfx -p letportal <pre><code>``` bash tab=\"Linux\"\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout $HOME/.aspnet/https/letportal.key -out $HOME/.aspnet/https/letportal.crt\nsudo openssl pkcs12 -export -out $HOME/.aspnet/https/letportal.pfx -inkey $HOME/.aspnet/https/letportal.key -in $HOME/.aspnet/https/letportal.crt\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout $HOME/.aspnet/https/letportal-cms.key -out $HOME/.aspnet/https/letportal-cms.crt\nsudo openssl pkcs12 -export -out $HOME/.aspnet/https/letportal-cms.pfx -inkey $HOME/.aspnet/https/letportal-cms.key -in $HOME/.aspnet/https/letportal-cms.crt\n</code></pre></p> <p>Warning</p> <p>In CMD, you should use %USERPROFILE%. In Powershell, you should use ${USERPROFILE}.</p>"},{"location":"installation/prerequisites/#docker","title":"Docker","text":"<p>If you want to deploy on Docker, you can install latest Docker.</p> <p>Debug on Docker</p> <p>We don't have a plan yet for supporting debug on Docker despite Visual Studio Community 2019 supports. A reason is when we started developing, this feature wasn't ready. We still prefer you to debug by Multiple Startup Projects</p>"},{"location":"installation/prerequisites/#database","title":"Database","text":"<p>Choose database type</p> <p>We should highlight to you this section before you reach further parts. LET Portal can work with these exact databases below:</p> <ul> <li>MongoDB 3.6 and later</li> <li>SQL Server 2016 and later</li> <li>PostgreSQL 10 and later</li> <li>MySQL 5.5, 5.6 and 5.7</li> </ul> <p>These databases and versions above are using for our development and test. However, you can try to connect with lower version, we don't ensure our installed driver (such as ADO.NET, MongoDB C# Driver) is working well. For backward compatible, you should check in their driver's documentation. We ONLY ensure to update latest driver.</p>"},{"location":"installation/prerequisites/#ensure-mongodb","title":"Ensure MongoDB","text":"<p>LET Portal is supporting many databases but we are struggling to de-couple a MongoDB outside our solution. We are using a MongoDB as a centralized log database following Serilog's configuration. The reasons why we choose MongoDB instead of any SQL database are:</p> <ul> <li>Maximum throughput on write</li> <li>Document-based instead of column-based, so it is schemaless</li> <li>Can transfer to ELK later (low priority)</li> </ul>"},{"location":"microservices/add-new-service/","title":"LET Portal Microservices - Add new service","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"microservices/add-new-service/#step1-create-new-service-project","title":"Step1: Create new service project","text":"<p>First, you need to create new .NET Core 3.1 project, choose whatever your project name. Then you need to copy this configuration below to <code>appsettings.json</code> file. You need to know your service name in unique, for example: <code>CorporateAPI</code>.</p> <p>``` json tab=\"appsettings.json\" {   \"ServiceOptions\": {     // Type your service name, ensure it is unique name     \"Name\": \"{Your_service_name}\",      // Your version, should match with configuration version folder     \"Version\": \"v1.0\",       // Your service management url     \"ServiceManagementEndpoint\": \"http://localhost:56456\"   },   \"ConfigurationServiceOptions\": {     // Your service management url     \"Endpoint\": \"http://localhost:56456/api/configurations\",      \"RetryCount\": 5,     \"DelayRetry\": 1000   } } <pre><code># Step 2: Import LETPortal.Core\n\nOpen nuget reference in new project, type `LetPortal.Core` to add latest version. [Nuget Link](https://www.nuget.org/packages/LetPortal.Core/)\n\n# Step 3: Change Program.cs\n\nYou need to replace a `CreateHostBuilder` method in Program.cs by following codes:\n\n``` c# tab=\"Program.cs\"\npublic static IHostBuilder CreateHostBuilder(string[] args)\n{\n    return Host.CreateDefaultBuilder(args)\n                .ConfigureAppConfiguration((hostingContext, config) =&gt;\n                {\n                    // Combine ConfigurationServiceOptions and ServiceOptions \n                    // to pull configuartion file\n                    config.AddConfigurationService();\n                })\n                .ConfigureWebHostDefaults(webBuilder =&gt;\n                {\n                    webBuilder.UseStartup&lt;Startup&gt;();\n                });\n}\n</code></pre></p>"},{"location":"microservices/add-new-service/#step-4-change-startupcs","title":"Step 4: Change Startup.cs","text":"<p>You need to add one line under <code>ConfigurateServices</code> method</p> <p>``` csharp tab=\"Startup.cs\" services     .AddLetPortal(Configuration, options =&gt;     {         // Enable DI DatabaseOptions in configuartion file         options.EnableDatabaseConnection = true;         // Enable microservices, allow to read configuration         options.EnableMicroservices = true;         // Enable service monitor         options.EnableServiceMonitor = true;         // Enable Serilog, must be true when turning on Centralized Log         options.EnableSerilog = true;     })     // If you want to validate OAuth2 JWT of LETPortal, add this line below     .AddJwtValidator() <pre><code>More optional step, **if you want to use this service stays behind LET portal Gateway**, please add this code in `Configure` method before `app.UseRouting()`\n\n``` c# tab=\"Configure\"\n app.UseLetPortal(appLifetime, options =&gt;\n            {\n                // If you don't create a service for LET Portal, turn it to false\n                options.EnableCheckUserSession = true;\n                // Both options below must be true when stayed behind LET Portal GW\n                // Also, EnableSerilog must be true\n                options.EnableCheckTraceId = true;\n                options.EnableWrapException = true;\n            });\n</code></pre></p>"},{"location":"microservices/add-new-service/#step-5-add-configuration-file-in-servicemanagementapis","title":"Step 5: Add configuration file in ServiceManagementApis","text":"<p>Move to <code>LetPortal.ServiceManagementApis</code> project folder, open <code>Files</code> folder and then create your new service folder, for example: <code>CorporateAPI</code>. Then you need to create sub folder of this with your service version, for example: <code>v1.0</code>. Make sure you have this path <code>Files\\CorporateAPI\\v1.0</code>.</p> <p>Then you create <code>appsettings.json</code> under your version folder. Copy these options into this.</p> <p>``` json tab=\"appsettings.json\" {   // Use this option if you want to use LET Portal DatabaseOptions class   // Otherwise, you can create your own   \"DatabaseOptions\": {     \"ConnectionString\": \"{Your connection string}\",     \"DataSource\": \"{Your_datasource}\",     \"ConnectionType\": \"{Your_DB_Type}\"   },   \"MonitorOptions\": {     // Turn it to true if you want to monitor Hardware and HTTP requests     \"Enable\": false,     \"NotifyOptions\": {       // Allow to send HeartBeat to ServiceManagement       \"Enable\": true     }   },   \"LoggerOptions\": {     \"NotifyOptions\": {       // Allow to send log back to Service Management with some StatusCodes       \"Enable\": true,       // Define HTTP Status Codes which need to send log       \"StatusCodes\": [ 500 ]     }   } } <pre><code>Then you want to declare for DI as .NET Core DI setup\n\n``` c#\nbuilder.Services.Configure&lt;ServiceOptions&gt;(builder.Configuration.GetSection(\"ServiceOptions\"));\n</code></pre></p> <p>Now you can add any options if you want into this file. And then you can inject <code>IOptionsMonitor&lt;YourOptions&gt;</code> anywhere in your service project.</p> <pre><code>public class ServiceControllers\n{\n    private readonly IOptionsMonitor&lt;ServiceOptions&gt; _options;\n    public ServiceControllers(IOptionsMonitor&lt;ServiceOptions&gt; options)\n    {\n        _options = options;\n    }\n}\n</code></pre>"},{"location":"microservices/add-new-service/#step-6-optional-use-cors","title":"Step 6: Optional - Use CORS","text":"<p>By default, LET Portall will add <code>CorsPortalOptions</code> which stays in <code>Files\\Shared</code> folder. It helps to handle CORS. If you have a plan to use CORS without reserve proxy or Gateway, you can use these codes below.</p> <p>``` json tab=\"CORS\" {   \"CorsPortalOptions\": {     \"AllowedHosts\": [       \"http://localhost:4200\"     ],     \"AllowedHeaders\": [],     \"AllowedMethods\": [],     // X-Token-Expired is mandatory, DON'T remove it     \"ExposedHeaders\": [ \"X-Token-Expired\" ],     // Allow to add AllowAnyHost, false to use AllowedHosts     \"AllowAnyHost\": true,     // Allow to add AllowAnyHeader, false to use AllowedHeaders     \"AllowAnyHeader\": true,     // Allow to add AllowAnyMethod, false to use AllowedMethods     \"AllowAnyMethod\": true,     // If it is true, we will bypass all CORS     // Turn false if you want to use these configs above     \"AllowAny\":  true   } } <pre><code>Then you just add `AddPortalCors()` under your `AddLetPortal()` in Startup.cs\n\n``` c#\nservices.AddLetPortal(Configuration, options =&gt;\n            {\n                options.EnableDatabaseConnection = false;\n                options.EnableMicroservices = true;\n                options.EnableSerilog = true;\n                options.EnableServiceMonitor = true;\n            })\n            .AddPortalCors()\n</code></pre></p> <p>So in <code>Configure</code> method, just add this code before <code>app.UseRouting()</code></p> <pre><code>app.UsePortalCors();\n</code></pre>"},{"location":"microservices/add-new-service/#step-7-optional-multiple-environments","title":"Step 7: Optional - Multiple Environments","text":"<p>We follow a Configuration standard of .NET Core, so that you just want to add <code>appsettings.{Your_Env}.json</code> in <code>Files\\{YourService}</code> folder. But you make sure you have to add <code>appsettings.{Your_Env}.json</code> in your service project to change Service Management url as well.</p>"},{"location":"microservices/add-new-service/#test","title":"Test","text":"<p>Run your service project, and then open LET Portal, login with <code>admin</code> account, go to Service Monitor page to check your service here</p> <p></p>"},{"location":"microservices/centralized-log/","title":"LET Portal Microservices - Centralized Log","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"microservices/centralized-log/#distributed-systems-problem","title":"Distributed Systems problem","text":"<p>Let's take a look in the problem when we develop Distributed Systems</p> <p></p> <p>Popular solution for this problem above is we need to use Correlation ID which helps us to gather all logs from service to service. Gateway will add X-Correlation-ID in HTTP Request and down it to all calling services. Then later you can use this ID for querying in a Centralized Log. So there are our solution:</p> <p></p>"},{"location":"microservices/centralized-log/#frequency-of-log","title":"Frequency of log","text":"<p>Log, likes as software's heartbeat, exposes your software weakness. In distributed systems, log will be sent everytime to Centralized Log. Because you shouldn't allow to lose any log in the transaction.</p> <p>However, LET Portal is designed for small systems, so it is very important in term of Performance when all services always send the log into Centralized Log. It may become unpredictable in Production with many requests come in and out. So that LET Portal reduces a frequency of log by changing from Active mode to Passive mode.</p> <ul> <li>Active Mode: Each service always send log to Centralized Log server</li> <li>Passive Mode: Service sends log to Centralized Log server based on condition. If nothing matches, service keeps log in local storage (Disk, Database). Later, admin needs to trigger Gather Logs action to get all logs in local storage per service</li> </ul> <p></p>"},{"location":"microservices/centralized-log/#serilog","title":"Serilog","text":"<p>LET Portal chooses Serilog for writing because it is flexible data. You can open <code>Files\\Shared\\v1.0\\appsettings.json</code> for Serilog Configuration.</p> <p>```json tab=\"Serilog\" { \"Serilog\": {     \"Using\": [ \"Serilog.Sinks.Console\", \"Serilog.Sinks.MongoDB\", \"Serilog.Sinks.File\" ],     \"MinimumLevel\": \"Information\",     \"WriteTo\": [       {         \"Name\": \"Console\"       },       {         \"Name\": \"MongoDBCapped\",         \"Args\": {           \"databaseUrl\": \"mongodb://localhost:27017/logs\",           \"collectionName\": \"servicelogs\"         }       }     ],     \"Enrich\": [ \"FromLogContext\" ]   } } <pre><code>Serilog will store log in MongoDB as you see. In fact, it is a centralized log database, so that means all service logs will be written in one place. That's our limitation in this time.\n\n!!! warning \"Limitation\"\n    We are trying to decouple a MongoDB by file. However, this way requires more effort than writing directly in Database. Beside, MongoDB is good way to store the log because it is schemaless.\n\nNext, if you want to use Serilog to write, you need to inject `IServiceLogger&lt;T&gt;` into your class constructor\n\n```c#\n public class ChartsController : ControllerBase\n    {\n        // Use this logger for writing log\n        private readonly IServiceLogger&lt;ChartsController&gt; _logger;\n\n        public ChartsController(\n            IServiceLogger&lt;ChartsController&gt; logger)\n        {\n            _logger = logger;\n        }\n\n        public IActionResult Get()\n        {\n            // Simple log\n            _logger.Info(\"New message\");\n\n            // Log with object\n            _logger.Info(\"Found chart: {@result}\", new Chart{ Name = \"abc\" });\n            return Ok();\n        }\n    }\n</code></pre></p>"},{"location":"microservices/centralized-log/#enable-notify-log","title":"Enable Notify Log","text":"<p>First, you need to enable Serilog in <code>Startup.cs</code></p> <pre><code>services.AddLetPortal(Configuration, options =&gt;\n            {\n                options.EnableMicroservices = true;\n                options.EnableSerilog = true;\n            })\n</code></pre> <p>Second, you add <code>UseLetPortal</code> in <code>Configure</code> method in <code>Startup.cs</code>.</p> <pre><code>app.UseLetPortal(options =&gt;\n  {\n      options.EnableCheckUserSession = true;\n      options.EnableCheckTraceId = true;\n      options.EnableWrapException = true;\n      options.SkipCheckUrls = new string[] { \n          // Your ignore urls, for example: \"api/accounts/login\"\n      };\n  });\n</code></pre> <p>Third, you can enable Notify Log based on HTTP Response Statuscode in <code>LoggerOptions</code>. See Add New Service</p> <pre><code>{\n  \"LoggerOptions\": {\n    \"NotifyOptions\": {\n      \"Enable\": true, // Enable Notify Log, it will push log to Service Management\n      \"StatusCodes\": [ 500 ], // Condition Statuscode\n      // Condition for specific url and status code\n      \"Urls\": [\n        {\n          \"Enable\" : true,\n          \"UrlPath\": \"api/accounts/login\",\n          \"StatusCodes\": [ 200, 204, 500]\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"microservices/centralized-log/#query-log","title":"Query Log","text":"<p>You can open LET Portal, go to Service Logs page.</p> <p></p>"},{"location":"microservices/overview/","title":"LET Portal Microservices","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"microservices/overview/#what-is-microservices","title":"What is Microservices?","text":"<p>Microservices is very popular in term of software design nowaday, in short meaning, it is a way of decoupling services as much as posible to out of monolithic container. </p> <p>We are living in the microservices era, most of new service-based softwares are thinking about microservices first. However, it is always a long way to go in the begining. LET Portal, which isn't out of this thinking, is still decoupling independent services as much as posible. </p>"},{"location":"microservices/overview/#built-in-features","title":"Built-in features","text":"<p>It isn't easy to construct a microservices in the begining. In fact, you should learn a lot of tool aspects such as Container Oschestration (Docker, Kubernetes), Service Discovery (Eureka), Service Configuration (Consul), etc. And they are suitable for medium to big projects (that require huge software components). LET Portal, in another hand, is a small project to help small company to adapt daily work. Thus, we provide some built-in features to help you reduce some burden tools above. There are features list which we provide:</p> <ul> <li>Service Monitor: inverval checking service status, it helps to detect a service problem such as CPU, Memory, HTTP Requests.</li> <li>Service Configuration: centralized configuration files, it helps to control multiple configuration files with multiple Environments.</li> <li>Centralized log: it helps to find quicly an error without tracing log files which staye on each service</li> </ul> <p>All features are in Service Management Apis project.</p>"},{"location":"microservices/service-configuration/","title":"LET Portal Microservices - Service Configuration","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"microservices/service-configuration/#distributed-systems-and-multiple-environments-problem","title":"Distributed Systems and Multiple Environments problem","text":"<p>In monolithic architecture, this problem isn't complexity. However, in distributed systems, it should be a big challenge to control many configuration files. Combine with multiple environments, it will multiply a number of configuration files for <code>n</code> environments. </p> <p>So we need to have a solution for centralizing all configuration files into one place that can provide exactly a environment configuration file. </p>"},{"location":"microservices/service-configuration/#net-core-configuration","title":".NET Core Configuration","text":"<p>.NET Core Configuration is a Configuration feature which helps .NET Core serivce to maintain it own configuration file. LET Portal is developed to keep this feature in Service Configuration. Let's take a look in this flow:</p> <p></p> <ol> <li>In ServiceA, it has own <code>appsettings.{env}.json</code> which contains <code>ServiceOptions</code> and <code>ConfigurationServiceOptions</code>. The main purpose of these options is configuring Service Management's Url, Service Name and Version. Please keep note 3 parameters.</li> <li>In ServiceA <code>Program.cs</code>, ServiceA will take Endpoint, Service Name and Version in <code>appsettings.json</code>, combine into a url is <code>api\\configurations\\ServiceA\\v1.0</code>. For example: <code>http://localhost:56456/api/configurations\\ServiceA\\v1.0</code>.</li> <li>Next, ServiceA performs HTTP GET via this url to retrieve a combined <code>appsettings.json</code> file which locates in <code>Files\\ServiceA\\v1.0\\appsettings.json</code> folder</li> <li>In Service Management, it combined <code>apsettings.json</code> and <code>appsettings.{Env}.json</code> which locates in the same folder <code>ServiceA\\v1.0</code>. Then it returns this combined file back to ServiceA.</li> <li>In ServiceA, after retrieving this file, it will combine between local <code>appsettings.json</code> and response <code>appsettings.json</code> into one. And it will register Configuration Dependency Injection which allowing to use <code>IOptionsMonitor&lt;Options&gt;</code>.</li> </ol> <p>These files in <code>Files</code> folder will be look like below:</p> <p></p>"},{"location":"microservices/service-configuration/#merge-version-based-configuration","title":"Merge version-based configuration","text":"<p>By default, LET Portal will merge top-bottom based on folder order. For example, if you have this service folder structure:</p> <ul> <li>ServiceA<ul> <li>v1.0<ul> <li>appsettings.json</li> <li>appsettings.Prod.json</li> </ul> </li> <li>v1.1<ul> <li>appsetting.json</li> <li>appsettings.Prod.json</li> </ul> </li> <li>v1.2<ul> <li>appsettngs.json</li> <li>appsettings.Prod.json</li> </ul> </li> </ul> </li> </ul> <p>So if you access <code>api/configurations/ServiceA/v1.0</code>, you will get <code>appsettings.json</code> of v1.0 only. But if you access <code>api/configurations/ServiceA/v1.2</code>, you will get combined of v1.0, v1.1, v1.2. Thus, a combined <code>appsettings.json</code> will be look like</p> <p>```json tab=\"v1.0\" {     \"DatabaseOptions\": \"ABC\" } <pre><code>```json tab=\"v1.1\"\n{\n    \"DatabaseOptions\": \"XYZ\",\n    \"Component\": \"123\",\n    \"IsAllowed\": true\n}\n</code></pre></p> <p>```json tab=\"v1.2\" {     \"DatabaseOptions\": \"XYZW\",     \"Component\": \"ABC\" } <pre><code>```json tab=\"combined v1.2\"\n{\n    \"DatabaseOptions\": \"XYZW\",\n    \"Component\": \"ABC\",\n    \"IsAllowed\": true\n}\n</code></pre></p>"},{"location":"microservices/service-configuration/#shared-folder","title":"Shared Folder","text":"<p>Another feature in Service Configuration is shared configuration file. It contains all shared options which applied into all services. The merging rule is applied as service folder.</p>"},{"location":"microservices/service-monitor/","title":"LET Portal Microservices - Service Monitor","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"microservices/service-monitor/#enable-monitor","title":"Enable Monitor","text":"<p>First, you need to enable in <code>ConfigureServices</code> method in <code>Startup.cs</code></p> <pre><code>services.AddLetPortal(Configuration, options =&gt;\n    {\n        options.EnableMicroservices = true;\n        options.EnableServiceMonitor = true;\n    }) \n</code></pre> <p>Second, you need to add <code>UseLetPortalMonitor</code> in <code>Configure</code> method in <code>Startup.cs</code></p> <pre><code>// Change Configure method with three parameters\npublic static void Configure(IApplicationBuilder app, IWebHostEnvironment env, IHostApplicationLifetime appLifetime)\n        {\n            app.UseLetPortalMonitor(appLifetime);\n            app.UseRouting();\n        }\n</code></pre> <p>Third, you need to enable monitor and notify in <code>MonitorOptions</code>.</p> <pre><code>\"MonitorOptions\": {\n    \"Enable\": true, // Enable to track HeartBeat\n    \"NotifyOptions\": {\n      \"Enable\": true // Enable to send HeartBeat to Service Management\n    }\n  }\n</code></pre>"},{"location":"microservices/service-monitor/#monitor-ui","title":"Monitor UI","text":"<p>You can open LET Portal, go to Service Monitor page</p> <p></p> <p>Then you can click on <code>Dashboard</code> icon to redirect to Monitor Dashboard page</p> <p></p>"},{"location":"open-source/list/","title":"Open-source projects","text":"<p>The documentation applies to: v0.8.0</p> <p>A special thank to many open-source projects that we imported to use on LET Portal</p>"},{"location":"open-source/list/#angular-libraries","title":"Angular libraries","text":"<ul> <li>Angular and Material Angular to bring this awesome SPA framework</li> <li>ang-jsoneditor</li> <li>angular-markdown-editor</li> <li>bootstrap-markdown</li> <li>guid-typescript</li> <li>mat-progress-buttons</li> <li>momentum-table</li> <li>ngx-clipboard</li> <li>ngx-custom-validators</li> <li>quill</li> </ul>"},{"location":"open-source/list/#net-core-libraries","title":".NET Core libraries","text":"<ul> <li>DotNET team to bring .NET Core for cross-platform</li> <li>CommandLineUtils</li> <li>Ocelot</li> <li>Polly</li> <li>Serilog</li> <li>Pomelo.EntityFrameworkCore.MySql</li> </ul>"},{"location":"overview/big-picture/","title":"Overview - Big Picture","text":"<p>The documentation applies to: v0.9.0</p>"},{"location":"overview/big-picture/#design-goal","title":"Design Goal","text":"<p>LET Portal (LP) has been designed for one important question: </p> <p>How can a small team develop and deliver quickly a change to colleagues?</p> <p>To be honest, we take a couple of months to answer this question. We would like to have a system can help me to generate an application form, a data list, and a dashboard in a few minutes without taking care seriously in some software aspects such as High Performance, High Availability, etc. to adapt a basic requirement. We just care about our colleagues's expectation, how they can use it, and how it reduces more time.</p>"},{"location":"overview/big-picture/#let-portal-architecture","title":"LET Portal Architecture","text":"<p>According to an architecture above, LET Portal has two components and one 3<sup>rd</sup>-party. There are:</p> <ul> <li>SPA Web: Angular 9, our main front-end web application. It will connect to Saturn to perform APIs.</li> <li>Saturn: .NET Core 3.1, our main back-bone web service. It will provide four big features: Identity, Portal, Chat&amp;Video, Microservices</li> <li>Proxy Server: Nginx</li> </ul> <p>Big change</p> <p>We have many discussions to compress from six components in v0.8.0 to two components in v0.9.0 as you see above. The main reason is we put the effort to develop one front-end and one back-end, the deployment stragedy will be yours. Now LET Portal is focusing on the releasing feature instead of scaling model.</p>"},{"location":"overview/big-picture/#pros-and-cons","title":"Pros and Cons","text":"<p>In our opinion, there are no perfect architecture and no architecture is suitable for most of softwares, includes technology-trend such as Micro-services, Saga, etc. So we list out pros and cons based on High Level Design abvobe. Hope they can guide you to go right direction when you have a plan to deploy LET Portal.</p>"},{"location":"overview/big-picture/#pros","title":"Pros","text":"<ul> <li>Separation of concerns: we can replace/add the components:<ul> <li>Proxy server: you can choose HAProxy instead of Nginx</li> <li>Gateway Ocelot: you can add one aggregate layer via Gateway. Ocelot is a top choice orKong, Zookeepr.</li> <li>Saturn's Identity: you can choose Identity Server 4 instead of our built-in Microsoft Identity. However, you need to add a little bit effort to transfrom Claims</li> <li>Service Management: you can choose Consul, Eureka instead of our Saturn's microservices</li> </ul> </li> <li>Support scalability with less changing code -&gt; Reduce deployment preparation</li> <li>Easy to understand by most of developer -&gt; Reduce training time</li> <li>Deployable on one VM or multiple VMs -&gt; Cost is efficient</li> <li>Be ready to apply micro-services when needed -&gt; Adaptive with trend</li> </ul>"},{"location":"overview/big-picture/#cons","title":"Cons","text":"<ul> <li>Many components are built-in, so features can't be comparable with others</li> <li>Security is acceptable, not suitable for High security requirement</li> <li>Availability is acceptable, but we need more time to deploy High Availability</li> </ul>"},{"location":"overview/big-picture/#components","title":"Components","text":""},{"location":"overview/big-picture/#spa-website","title":"SPA Website","text":"<p>Front-end site of LET Portal, it is an Single Page Application which connects to one web service is Saturn</p> <p>Source code location: src/web-portal  Technology: Angular 9.0.0</p>"},{"location":"overview/big-picture/#saturn","title":"Saturn","text":"<p>We have a big change from 0.8.0 to 0.9.0. All features, all APIs have been combined into one service - Saturn. </p> <p></p> <p>As the real Saturn planet in the universe, it will bring us to new centralized platform which has much moons (services) be rotated around. With this, we can put more and more APIs, Background services and gRPC service to make interconnections. Let's look deeper into Saturn Architecture:</p> <p></p> <p>In the architecture above, Saturn consists of four main features: Identity, Portal, Chat&amp;Video and Microservice. </p> <ul> <li>Identity and Portal: work with Web API, that mean they expose the public endpoint to be called.</li> <li>Chat&amp;Video: works under SignalR, that mean they expose the real-time connection between Client and Server.</li> <li>Microservice: work under gRPC, that mean they only expose the private endpoint in HTTP/2 protocol to be called via inter-service communication.</li> </ul>"},{"location":"overview/big-picture/#identity","title":"Identity","text":"<p>This feature is providing authentication/authorization mechanism between SPA Web and Gateway Ocelot. Main functions are: - Login with JWT - Register/ Forgot Password - Get roles and claims - Track user's activities</p> <p>Source code location: src/web-apis/LetPortal.Identity</p>"},{"location":"overview/big-picture/#portal","title":"Portal","text":"<p>This feature provides all data for LET Portal SPA Web, without this, it can't work. This service has many functions to execute, so we will discuss more detail later.</p> <p>Source code location: src/web-apis/LetPortal.Portal</p>"},{"location":"overview/big-picture/#chat","title":"Chat","text":"<p>This feature provides a message exchange and bridge for Video call. That helps to construct a chat room and cache message for improving performance.</p> <p>Source code location: src/web-apis/LetPortal.Chat</p>"},{"location":"overview/big-picture/#microservice","title":"Microservice","text":"<p>This feature is built-in for micro-services architecture. This provides some basic functions as SM in theory:</p> <ul> <li>Service Configuration</li> <li>Service Monitor</li> <li>Service Logging</li> </ul> <p>These APIs are using gRPC protocol from 0.9.0</p> <p>Source code location: </p> <ul> <li>src/web-apis/LetPortal.Microservices.Server</li> <li>src/web-apis/LetPortal.Microservices.Client</li> </ul>"},{"location":"overview/technologies-keypoints/","title":"Overview - LET Portal Technologies","text":"<p>The documentation applies to: v0.9.0</p>"},{"location":"overview/technologies-keypoints/#client-side","title":"Client side","text":"<p>Angular 9.0.0 is top SPA framework until now. It provides most of functionalities for building one SPA website, we don't need to add more libraries to make it done. </p> <p>Beside, a main language of Angular is Typescript which is compiling language to Javascript. Typescript is very similiar with OOP languages such as Java or C#, so if you have a background in these languages, Typescript is easy to go.</p> <p>Why don't choose React or Vue?</p> <p>Interesting question nowaday, React and Vue are growing quickly and becoming two competitors of Angular. However, there are some reasons which we can't go with:</p> <ul> <li>They are a library, not framework. That means we need to require many independent libraries to make SPA work. We don't need to take more time for resolving this problem in a small team.</li> <li>The full-stack term is very popular now. So that means the developer can take hands-on both side. OOP-based language is a key point here, Typescript is good to go for switching a context between Client-side and Server-side.</li> </ul>"},{"location":"overview/technologies-keypoints/#server-side","title":"Server side","text":"<p>.NET Core 3.1 is a main open-source framework to build all services on server side. Unlike .NET Standard has been built over 18 years without supporting cross-platform, .NET Core supports cross-platform, high-performance without many tightly dependencies on Windows OS. </p> <p>In our opinion, a startup or small company needs to spend a small cost for hosting and then scale-up later. So Linux OS is a popular choice in this situation and .NET Core is a good way to go.</p>"},{"location":"overview/technologies-keypoints/#os","title":"OS","text":"<p>Info</p> <p>According to .NET Core features, we will aim Windows and Linux OS to test and deploy LET Portal. We haven't a plan for MacOS yet. These are list of testing OS (if you don't find your OS here, just try to deploy because we don't have enough time to test):</p> <ul> <li>Windows 10 x64 OS</li> <li>Ubuntu 18.0.4 LTS</li> <li>Docker with .netcore:3.1-alpine</li> </ul>"},{"location":"overview/technologies-keypoints/#database","title":"Database","text":"<p>Please read more detail here</p>"},{"location":"roadmap/0.6.0/","title":"Roadmap - 0.6.0","text":"<p>Updated date: 26<sup>th</sup> Mar 2020</p>"},{"location":"roadmap/0.6.0/#high-priority-features","title":"High Priority Features","text":"<ul> <li> Dynamic List<ul> <li> Export as xml file - Client side</li> <li> Clone one Dynamic List</li> <li> Delete Dynamic List</li> </ul> </li> <li> Standard<ul> <li> Support Array data type</li> <li> Clone one Standard</li> <li> Delete Standard </li> </ul> </li> <li> Chart<ul> <li> Clone one Chart</li> <li> Delete chart </li> </ul> </li> <li> Page    <ul> <li> Delete Page </li> </ul> </li> <li> Security<ul> <li> Add Admin role</li> <li> Add Developer role </li> <li> Add User role </li> </ul> </li> </ul>"},{"location":"roadmap/0.6.0/#medium-priority-features","title":"Medium Priority Features","text":"<p>Note</p> <p>Low priority features might be moved to newer version, we attach a list here for tracking a base version</p> <ul> <li> Security<ul> <li> Change Password</li> </ul> </li> <li> User<ul> <li> Profile Page</li> </ul> </li> </ul>"},{"location":"roadmap/0.6.0/#low-priority-features","title":"Low Priority Features","text":"<p>Note</p> <p>Low priority features might be moved to newer version, we attach a list here for tracking a base version</p> <ul> <li> Dynamic List<ul> <li> Export as large xml file - Server side Move to low priority</li> </ul> </li> <li> Page<ul> <li> Add more default claims such as Claim for Button, Section</li> </ul> </li> <li> Angular<ul> <li> Upgrade Angular 9 </li> </ul> </li> </ul>"},{"location":"roadmap/0.6.0/#bugs","title":"Bugs","text":""},{"location":"roadmap/0.7.0/","title":"Roadmap - 0.7.0","text":"<p>Updated date: 10<sup>th</sup> Apr 2020</p>"},{"location":"roadmap/0.7.0/#high-priority-features","title":"High Priority Features","text":"<ul> <li> Chat &amp; Video call<ul> <li> Internal Chat</li> <li> Internal Video call</li> </ul> </li> </ul>"},{"location":"roadmap/0.7.0/#medium-priority-features","title":"Medium Priority Features","text":"<ul> <li> Entity Frameworks<ul> <li> Fix PK and FK string length</li> </ul> </li> </ul>"},{"location":"roadmap/0.7.0/#low-priority-features","title":"Low Priority Features","text":"<p>Note</p> <p>Low priority features might be moved to newer version, we attach a list here for tracking a base version</p> <ul> <li> Chat<ul> <li> Group Chat</li> <li> Group Video call</li> </ul> </li> <li> Dynamic List<ul> <li> Export as large xml file - Server side Move to low priority</li> </ul> </li> <li> Page<ul> <li> Add more default claims such as Claim for Button, Section</li> </ul> </li> <li> Angular<ul> <li> Upgrade Angular 9 </li> </ul> </li> </ul>"},{"location":"roadmap/0.8.0/","title":"Roadmap - 0.8.0","text":"<p>Updated date: 22th Apr 2020</p>"},{"location":"roadmap/0.8.0/#high-priority-features","title":"High Priority Features","text":"<ul> <li> Localization<ul> <li> Support en-US and vi-VN</li> <li> Localization builder</li> <li> Localization Backup &amp; Restore</li> </ul> </li> <li> Centralization App<ul> <li> Package App</li> <li> Install App</li> </ul> </li> <li> Migrate to Angular 9</li> </ul>"},{"location":"roadmap/0.8.0/#medium-priority-features","title":"Medium Priority Features","text":"<p>Nothing</p>"},{"location":"roadmap/0.8.0/#low-priority-features","title":"Low Priority Features","text":"<p>Note</p> <p>Low priority features might be moved to newer version, we attach a list here for tracking a base version</p> <ul> <li> Chat<ul> <li> Group Chat</li> <li> Group Video call</li> </ul> </li> <li> Dynamic List<ul> <li> Export as large xml file - Server side Move to low priority</li> </ul> </li> <li> Page<ul> <li> Add more default claims such as Claim for Button, Section</li> </ul> </li> </ul>"},{"location":"roadmap/0.9.0/","title":"Roadmap - 0.9.0","text":"<p>Updated date: 13<sup>th</sup> Dec 2020</p> <p>We are revamping more documentation to adapt Roadmap 1.0.0</p>"},{"location":"security/roles/","title":"Security - LET Portal Roles","text":"<p>The documentation applies to: v0.8.0</p>"},{"location":"security/roles/#default-account","title":"Default Account","text":"<p>LET Portal provides only one default account <code>admin</code>|<code>@Dm1n!</code> as SuperAdmin role</p>"},{"location":"security/roles/#default-roles","title":"Default Roles","text":"<p>There are four default roles on LET Portal:</p> Role Description Restriction SuperAdmin Most powerful role, they can go across all pages, perform all Portal Apis. We are hard code to bypass this role None Admin Same with Super Admin role, but it needs to config instead of bypass Depends on claims Developer Can access some builder pages such as Standard, Dynamic List, Chart, Page, Service Monitor Can't access to Apps, Users, Roles, Databases Management and Backup&amp;Restore User Lowest role, assign to your end-user Empty"}]}